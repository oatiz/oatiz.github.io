{"meta":{"title":"おはよう","subtitle":"JAVA | JVM | DSAA","description":"迷途的羔羊","author":"oatiz","url":"https://oatiz.me"},"pages":[{"title":"About","date":"2018-12-27T07:09:17.485Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"about/index.html","permalink":"https://oatiz.me/about/index.html","excerpt":"","text":"友情链接宇宙湾 大数据大佬 Syoko 女装大佬"},{"title":"Project","date":"2018-12-27T07:09:17.501Z","updated":"2018-12-27T07:09:17.501Z","comments":true,"path":"project/index.html","permalink":"https://oatiz.me/project/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-12-27T07:09:17.501Z","updated":"2018-12-27T07:09:17.501Z","comments":true,"path":"tags/index.html","permalink":"https://oatiz.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"摘录:分布式数据库学习路线","slug":"distributed_db_roadmap","date":"2018-12-27T14:51:14.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2018/12/27/distributed_db_roadmap/","link":"","permalink":"https://oatiz.me/2018/12/27/distributed_db_roadmap/","excerpt":"","text":"来源摘录自知乎问题:对数据库和分布式很感兴趣，学习路线是什么？ 李晨曦的回答:分布式的学习不是很了解，数据库有些经验可以按照如下步骤学习 1. 入门接触过数据库的基础知识和应用之后，就可以开始进行内核级的学习了，先学习传统的关系型数据库，因为它是一切数据库的基础，包括现在比较火的内存数据库，分布式数据库等。 从IV Database System Implementation开始，把这本书吃透了，包括数据的物理存储结构，索引，查询引擎，缓冲池，SQL编译，查询优化，系统恢复，并发控制。然后实现上面这些理论知识，完成一个支持简单DML，DDL的数据库。一定要实现，只是学习理论，不动手实践是不可能深刻理解的，就像空中楼阁。 《数据库系统实现（英文版）（第2版）》 http://dsm.fudan.edu.cn/JSPWiki/attach/Material_db/database%20system%20complete%20book_2nd.pdf2 2. 深入理解参考这个论文列表，把里面的论文都读一遍，了解关系型数据库历史，了解数据库的发展过程中走过的弯路，理解它为什么会变成现在这个样子 rxin/db-readings 同时也要锻炼系统级编程的能力，深刻理解操作系统的工作原理，并行编程，熟悉一些硬件的工作原理，为以后打下良好的基础。可以读一些优秀的开源数据库的源码，如Peloton的cmu-db/peloton，只有几万行代码，PostgreSQL的，代码非常多，不过注释非常清晰 3. 进阶看最近几年数据库相关的论文，各个方向的发展都全面了解一下，可以参考这两个课程提到的论文Schedule - CMU 15-721 :: Advanced Database System (Spring 2017)，Practical Course: Database Implementation，找一些感觉兴趣的论文复现一下里面提到的方法。很多算法，数据结构都有一定的适用场景和局限性，要通过自己实现与实验来深刻体会。 4. 破茧成蝶这才是读博最重要的阶段，通过之前的学习，应该对数据库的各个方面都非常了解了，而且也打下了良好的编程能力，可以选1,2个感兴趣的方向，看看有没有什么可以改进，突破的点，想出自己的idea，实现并与现有的方法进行对比，如果可以做的很好，就非常厉害了。 Ed Huang的回答:深夜倒时差睡不着，上来写写 对传统数据库不太了解，毕竟不是科班出身。 对分布式系统学习还是有点心得，理论基础要打牢。 1从存储系统入手，Google 的老三篇入门，最好能顺手把 6.824 做了，不难，智商正常的本科生都能做完，另外推荐一本书 Distributed systems for fun and profit 2做完 6.824 后就可以从复制协议开始入手, Paxos 的几篇，Lamport 那篇有空膜拜一下好了，真正有价值的是 Paxos made live / Paxos made simple 那几篇，然后可以深入看看 Raft, 这个在 6.824 里面会用到. 3然后开始开非 Google 系的存储系统比如 Dynamo ，Haystack 啊什么的还有一些最终一致性的系统，比如 FB 在一些系统上的设计虽然没有 Google 那么 fancy，但是看看还是不错的，至少知道在 FB 的数量级下会遇到那些问题，如何用糙快猛的办法 workaround。。。 和一些分布式计算系统和流计算系统，比如 MR 就不说了，比如 Dremel 啊，Spark 啊，MillWheel 啊，Sawzall 啊 4把 SQL 优化器的一些基础知识学会咯，然后尽量用分布式系统的思想去思考。然后有点感觉了以后，可以看 F1 和 2017 的 Spanner 那两篇论文找找感觉，毕竟比较简单。然后就可以去找一些 OLAP 系统的论文看看了，HyPer 有一堆论文，Impala / Presto / Kudu 啊， AsterixDB 啊什么的，这个领域就多了去了。 5这时候就可以开始实践了，自己动手撸没啥意思，而且工程量巨大无比，我建议还是要和靠谱的团队一起工作，进步很快，比如暑假没事或者实验室老师不管的话可以来我们这边实实习啊，毕竟鄙司是分布式系统和数据库技术融合得很不错的公司，离你们学校又近，打个车 20 分钟就到了，我的邮箱是 huang at http://pingcap.com，不过建议还是你把邮件发给 shenli，毕竟我推荐没有 iPhone 拿，他是有的…有机会未来见。","categories":[],"tags":[{"name":"excerpts","slug":"excerpts","permalink":"https://oatiz.me/tags/excerpts/"},{"name":"distributed system","slug":"distributed-system","permalink":"https://oatiz.me/tags/distributed-system/"},{"name":"database","slug":"database","permalink":"https://oatiz.me/tags/database/"}]},{"title":"Raft学习笔记","slug":"raft_summary","date":"2018-12-07T12:35:19.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2018/12/07/raft_summary/","link":"","permalink":"https://oatiz.me/2018/12/07/raft_summary/","excerpt":"","text":"概念 Raft is an algorithm for managing a replicated log. Raft是一种用来管理复制日志的一致性算法. 实现 Raft implements consensus by first electing a distinguished leader, then giving the leader complete responsibility for managing the replicated log. The leader accepts log entries from clients, replicates them on other servers, and tells servers when it is safe to apply log entries to their state machines. Raft通过选举一个高贵的领导人,然后给予它全部职责来管理复制日志从而实现一致性. 领导人接收来自客户端的日志,在其他服务器上复制它们,并告诉服务器当它们是安全的情况下将这些日志应用到状态机. Raft将共识问题分解为三个相对独立的子问题: Leader election: a new leader must be to chosen when an existing leader fails 领导人选举: 当已存在的领导人宕机时新的领导人必须要被选出来 Log replication: the leader must accept log entries from clients and replicate them across the cluster, forcing the other logs to agree with its own 日志复制: 领导人必须从客户端接收日志然后复制到集群中的其他节点, 并且强制要求其他节点的日志和自己相同 Safety: the key safety property for Raft is the State Machine Property : if any server has applied a particular log entry to its state machine, then no other server may apply a different command for same log index. 安全性: Raft的安全性关键是状态机安全: 如果任何服务器已将特定日志条目应用于其状态机,那么其他服务器不能在同一日志索引位置应用不同的命令 SafetyElection Safety选举安全特性 at most one leader can be elected in a given term.在一个给定的任期号, 最多只有一个领导人会被选举出来 Leader Append-Only领导人只附加原则 a leader never overwrites or deletes entries in its log; it only appends new entries.领导人永远不会覆盖或删除其日志中的条目; 它只附加新条目. Log Matching日志匹配原则 if two logs contain an entry with the same index and term, then the logs are identical in all entries up through the given index.如果两个日志在相同索引位置的日志条目的任期号相同, 那么这两个日志从头到这个索引位置的都是相同的. Leader Completeness领导人完全特性 if a log entry is committed in a given term, then that entry will be present in the logs of the leaders for all higher-numbered terms.如果在给定的任期中提交了某条日志条目, 则该日志条目必然出现在所有更高任期编号的领导人的日志中. State Machine Safety状态机安全特性 if a server has applied a log entry at a given index to its state machine, no other server will ever apply a different log entry for the same index.如果服务器已将给定索引处的日志条目应用于其状态机, 那么其他服务器不会在同一索引提交不同的日志条目. 精简摘要Rolestruct12345678pub enum StateRole &#123; /// The node is a follower of the leader. Follower, /// The node could become a leader. Candidate, /// The node is a leader. Leader,&#125; Statestruct12345678910111213141516171819202122232425262728293031323334353637383940414243444546pub struct State &#123; // Persistent state on all servers (Updated on stable storage before responding to RPCs) // 持久化在所有服务器上的状态 (在响应RPC之前更新) /// 1. currentTerm /// latest term server has seen (initialized to 0 on first boot, increases monotonically) /// 服务器已知的最后一次任期号 (初始化为0,持续增加) pub current_term: u64, /// 2. votedFor /// candidateId that received vote in current term (or null if none) /// 在当前任期内获得该节点投票的候选人id (没有就为null) pub voted_for: u64, /// 3. log[] /// log entries; each entry contains command for state machine, and term when entry was received by leader (first index is 1) /// 日志集合; 每个记录包含状态机的命令, 以及领导者收到条目时的任期 (第一个索引为1) pub log: Vec![], /// Volatile state on all servers /// 在所有服务器上面容易变的状态 /// 4. commitIndex /// index of highest log entry known to be committed (initialized to 0, increases monotonically) /// 已知最大的被提交日志的索引 (初始化为0, 持续增加) pub commit_index: u64, /// 5. lastApplied /// index of highest log entry applied to state machine (initialized to 0, increases monotonically) /// 最后应用于状态机的日志索引 (初始化为0, 持续增加) pub last_applied: u64, /// Volatile state on leaders: (Reinitialized after election) /// 在领导人上面易变的状态 (选举之后重新初始化) /// 6. nextIndex[] /// for each server, index of the next log entry to send to that server (initialized to leader last log index + 1) /// 对于每个服务器,要发送到该服务器的下一个日志条目的索引 (初始化为领导人最后日志索引 + 1) pub next_index: Vec![], /// 7. matchIndex[] /// for each server, index of highest log entry known to be replicated on server (initialized to 0, increases monotonically) /// 对于每个服务器, 已经在服务器上复制的最高日志条目的索引 (初始化为0, 持续递增) pub match_index: Vec![],&#125; AppendEntries RPCstruct123456789101112131415161718192021222324252627282930313233343536373839404142434445/// Invoked by leader to replicate log entries ; also used as heartbeat/// 由leader调用来复制日志; 也用作发送心跳包pub struct AppendEntriesRPC &#123; /// 1. term /// leader’s term /// 领导人的任期号 pub term: u64, /// 2. leaderId /// so follower can redirect clients /// 领导人的id,便于跟随者可以重定向客户端 pub leader_id: u64, /// 3. prevLogIndex /// index of log entry immediately preceding new ones /// 紧接之前的,新的日志条目的索引 pub prev_log_index: u64, /// 4. prevLogTerm /// term of prevLogIndex entry /// prevLogIndex日志条目的索引值 pub prev_log_term: u64, /// 5. entries[] /// log entries to store (empty for heartbeat; may send more than one for efficiency) /// 需要被保存的日志集合 (为空时表示心跳; 为了提升效率可能会发送多个) pub entries: Vec![], /// 6. leaderCommit /// leader’s commitIndex /// 领导人的 被提交日志的最大索引 pub leader_commit: u64,&#125;pub struct Result &#123; /// 1. term /// currentTerm, for leader to update itself /// 当前任期号, 供领导者更新自己 pub term: u64, /// 2. success /// true if follower contained entry matching prevLogIndex and prevLogTerm /// 如果跟随者包含匹配prevLogIndex和prevLogTerm的日志条目, 则返回true pub success: bool,&#125; Receiver implementation Reply false if term &lt; currentTerm 如果term &lt; currentTerm, 则返回false Reply false if log doesn’t contain an entry at prevLogIndex whose term matches prevLogTerm 如果日志在prevLogIndex位置的条目,它的任期号与prevLogTerm不匹配,则返回false If an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all that follow it 如果已有日志条目与新的日志条目冲突 (索引相同但任期号不同), 删除已有日志条目及其后面的所有日志条目 Append any new entries not already in the log 附加在日志中尚未存在的任何新日志条目 If leaderCommit &gt; commitIndex, set commitIndex = min(leaderCommit, index of last new entry) 如果leaderCommit大于commitIndex, 则设置commitIndex等于 (领导人提交日志的最大索引, 新日志条目中最后的一个的索引) 两个中最小的值 RequestVote RPCstruct1234567891011121314151617181920212223242526272829303132333435/// Invoked by candidates to gather votes/// 由候选人调用来收集选票pub struct RequestVoteRPC &#123; /// 1. term /// candidate’s term /// 候选人的任期号 pub term: u64, /// 2. candidateId /// candidate requesting vote /// 候选人的id, 候选人要求投票 pub candidate_id: u64, /// 3. lastLogIndex /// index of candidate’s last log entry /// 候选人最后一个日志条目的索引 pub last_log_index: u64, /// 4. lastLogTerm /// term of candidate’s last log entry /// 候选人最后一个日志条目的任期号 pub last_log_term: u64,&#125;pub struct Result &#123; /// 1. term /// currentTerm, for candidate to update itself /// 当前任期号, 供候选人更新自己 pub term: u64, /// 2. voteGranted /// true means candidate received vote /// true表示候选人获得投票 pub vote_granted: bool,&#125; Receiver implementation Reply false if term &lt; currentTerm 如果term小于currentTerm, 则返回false If votedFor is null or candidateId, and candidate’s log is at least as up-to-date as receiver’s log, grant vote 如果votedFor等于null或candidateId, 并且候选人的日志至少与接收者的日志一样新时, 则投票给它 Rules for ServersAll Servers If commitIndex &gt; lastApplied: increment lastApplied, apply log[lastApplied] to state machine 如果commitIndex大于lastApplied: 那么将lastApplied + 1, 并将log[lastApplied]应用到状态机 If RPC request or response contains term T &gt; currentTerm: set currentTerm = T, convert to follower 如果RPC请求或响应中 任期号T大于currentTerm: 那么就将currentTerm设置为任期号T, 并转换为follower Followers Respond to RPCs from candidates and leaders 响应候选人和领导人的RPC请求 If election timeout elapses without receiving AppendEntries RPC from current leader or granting vote to candidate: convert to candidate 如果在选举超时前没有从当前领导者接收到AppendEntries RPC,或者是候选人的RequestVote RPC时: 就将自己转换为候选人 Candidates On conversion to candidate, start election 转换为候选人后, 立即开始选举 Increment currentTerm 自增当前的任期号 Vote for self 给自己投票 Reset election timer 重置选举超时计时器 Send RequestVote RPCs to all other servers 发送RequestVote RPC给其他所有服务器 If votes received from majority of servers: become leader 如果获得大多数服务器的选票: 那么就变成领导人 If AppendEntries RPC received from new leader: convert to follower 如果接收到新领导人的AppendEntries RPC: 那么就转变为跟随者 If election timeout elapses: start new election 如果选举超时: 再发起一轮新选举 Leaders Upon election: send initial empty AppendEntries RPCs (heartbeat) to each server; repeat during idle periods to prevent election timeouts 领导人当选时: 将空的AppendEntries RPC (心跳) 发送到每个服务器; 在一定空闲期间后不停重复发送以防止选举超时 (阻止跟随者没有收到心跳时,将自己变为候选人) If command received from client: append entry to local log, respond after entry applied to state machine 如果从客户端收到请求: 将日志条目附加到本地日志, 在日志条目被应用于状态机后响应客户端 If last log index ≥ nextIndex for a follower: send AppendEntries RPC with log entries starting at nextIndex 对于某个跟随者, 如果最后面的日志索引的大于等于nextIndex: 那么发送AppendEntries RPC 从nextIndex开始的所有日志条目 If successful: update nextIndex and matchIndex for follower 如果成功: 更新相应跟随者的nextIndex和matchIndex If AppendEntries fails because of log inconsistency: decrement nextIndex and retry 如果因为日志不一致而失败: 递减nextIndex并重试 If there exists an N such that N &gt; commitIndex, a majority of matchIndex[i] ≥ N, and log[N].term == currentTerm: set commitIndex = N 如果存在一个满足N &gt; commitIndex的N, 并且大多数matchIndex[i] &gt;= N成立, 并且log[N].term == currentTerm成立: 那么就设置commitIndex等于这个N draft log replication(日志复制) 系统所有的更改都通过leader操作 每个更改都会作为 节点日志的一个条目 当前日志条目没有提交,所以不会更新节点的值 要提交此日志条目,首先要将其复制到follower节点们 然后leader等待到大多数节点写入此条目 当前条目提交到该leader节点 然后leader节点通知follow节点们此条目被提交 timeout 在raft中有两个超时设置来控制选举 election timeout (选举超时)选举超时的值是介于150ms和300ms的随机值, 选举超时后,follower节点将变成candidate节点并重新开始一个选举. 投票给自己,并向其他节点发送投票请求消息 如果收到此消息的节点在这个选举期内没有投过票,那就会投票给该candidate,并且重设选举超时时间 一旦该候选人获得大多数投票,它就会变为leader节点 leader节点会开始向follower发送append entries(附近条目) 消息 这些消息按心跳超时指定的间隔发送 然后follower节点会回复每个append entries(附近条目)消息 这个选举周期会持续到follower节点停止心跳成为新的candidate节点 graph LR A[ ] -->|starts up| Follower[Follower] Follower --> | times out, starts election| Candidate{Candidate} Candidate --> |receives votes from majority of servers| Leader((Leader)) Candidate --> |discovers current leader or new term| Follower Leader --> |discovers server with higher term| Follower Candidate --> |times out, new election| Candidate","categories":[],"tags":[{"name":"raft","slug":"raft","permalink":"https://oatiz.me/tags/raft/"},{"name":"cap","slug":"cap","permalink":"https://oatiz.me/tags/cap/"},{"name":"distributed consensus","slug":"distributed-consensus","permalink":"https://oatiz.me/tags/distributed-consensus/"}]},{"title":"寻找一种易于理解的一致性算法(扩展版)--转载","slug":"raft-zh_cn","date":"2018-12-05T14:14:25.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2018/12/05/raft-zh_cn/","link":"","permalink":"https://oatiz.me/2018/12/05/raft-zh_cn/","excerpt":"","text":"文章转载自maemual同学的raft-zh_cn 摘要Raft是一种为了管理复制日志的一致性算法。它提供了和Paxos算法相同的功能和性能，但是它的算法结构和Paxos不同，使得Raft算法更加容易理解并且更容易构建实际的系统。为了提升可理解性Raft将一致性算法分解成了几个关键模块，例如领导人选举、日志复制和安全性。同时它通过实施一个更强的一致性来减少需要考虑的状态的数量。从一个用户研究的结果可以证明，对于学生而言Raft算法比Paxos算法更加容易学习。Raft算法还包括一个新的机制来允许集群成员的动态改变，它利用重叠的大多数来保证安全性。 1 介绍一致性算法允许一组机器像一个整体一样工作，即使其中一些机器出现故障也能够继续工作下去。正因为如此，一致性算法在构建可信赖的大规模软件系统中扮演着重要的角色。在过去的 10 年里，Paxos算法统治着一致性算法这一领域：绝大多数的实现都是基于Paxos或者受其影响。同时Paxos也成为了教学领域里讲解一致性问题时的示例。但是不幸的是，尽管有很多工作都在尝试降低它的复杂性，但是Paxos算法依然十分难以理解。并且Paxos自身的算法结构需要进行大幅的修改才能够应用到实际的系统中。这些都导致了工业界和学术界都对Paxos算法感到十分头疼。和Paxos算法进行过努力之后，我们开始寻找一种新的一致性算法，可以为构建实际的系统和教学提供更好的基础。我们的做法是不寻常的，我们的首要目标是可理解性：我们是否可以在实际系统中定义一个一致性算法，并且能够比Paxos算法以一种更加容易的方式来学习。此外，我们希望该算法方便系统构建者的直觉的发展。不仅一个算法能够工作很重要，而且能够显而易见的知道为什么能工作也很重要。Raft一致性算法就是这些工作的结果。在设计Raft算法的时候，我们使用一些特别的技巧来提升它的可理解性，包括算法分解（Raft主要被分成了领导人选举，日志复制和安全三个模块）和减少状态机的状态（相对于Paxos，Raft减少了非确定性和服务器互相处于非一致性的方式）。一份针对两所大学 43 个学生的研究表明Raft明显比Paxos算法更加容易理解。在这些学生同时学习了这两种算法之后，和Paxos比起来，其中 33 个学生能够回答有关于Raft的问题。Raft算法在许多方面和现有的一致性算法都很相似（主要是 Oki 和 Liskov 的 Viewstamped Replication），但是它也有一些独特的特性： 强领导者：和其他一致性算法相比Raft使用一种更强的领导能力形式。比如，日志条目只从领导者发送给其他的服务器。这种方式简化了对复制日志的管理并且使得 Raft算法更加易于理解。 领导选举：Raft算法使用一个随机计时器来选举领导者。这种方式只是在任何一致性算法都必须实现的心跳机制上增加了一点机制。在解决冲突的时候会更加简单快捷。 成员关系调整：Raft使用一种共同一致的方法来处理集群成员变换的问题，在这种方法下，处于调整过程中的两种不同的配置集群中大多数机器会有重叠，这就使得集群在成员变换的时候依然可以继续工作。 我们相信，Raft算法不论出于教学目的还是作为实践项目的基础都是要比Paxos或者其他一致性算法要优异的。它比其他算法更加简单，更加容易理解；它的算法描述足以实现一个现实的系统；它有好多开源的实现并且在很多公司里使用；它的安全性已经被证明；它的效率和其他算法比起来也不相上下。接下来，这篇论文会介绍以下内容：复制状态机问题（第 2 节），讨论Paxos的优点和缺点（第 3 节），讨论我们为了理解能力而使用的方法（第 4 节），阐述Raft一致性算法（第 5-8 节），评价Raft算法（第 9 节），以及一些相关的工作（第 10 节）。 2 复制状态机一致性算法是从复制状态机的背景下提出的（参考英文原文引用37）。在这种方法中，一组服务器上的状态机产生相同状态的副本，并且在一些机器宕掉的情况下也可以继续运行。复制状态机在分布式系统中被用于解决很多容错的问题。例如，大规模的系统中通常都有一个集群领导者，像 GFS、HDFS 和 RAMCloud，典型应用就是一个独立的的复制状态机去管理领导选举和存储配置信息并且在领导人宕机的情况下也要存活下来。比如 Chubby 和 ZooKeeper。 图 1 ：复制状态机的结构。一致性算法管理着来自客户端指令的复制日志。状态机从日志中处理相同顺序的相同指令，所以产生的结果也是相同的。 复制状态机通常都是基于复制日志实现的，如图 1。每一个服务器存储一个包含一系列指令的日志，并且按照日志的顺序进行执行。每一个日志都按照相同的顺序包含相同的指令，所以每一个服务器都执行相同的指令序列。因为每个状态机都是确定的，每一次执行操作都产生相同的状态和同样的序列。保证复制日志相同就是一致性算法的工作了。在一台服务器上，一致性模块接收客户端发送来的指令然后增加到自己的日志中去。它和其他服务器上的一致性模块进行通信来保证每一个服务器上的日志最终都以相同的顺序包含相同的请求，尽管有些服务器会宕机。一旦指令被正确的复制，每一个服务器的状态机按照日志顺序处理他们，然后输出结果被返回给客户端。因此，服务器集群看起来形成一个高可靠的状态机。实际系统中使用的一致性算法通常含有以下特性： 安全性保证（绝对不会返回一个错误的结果）：在非拜占庭错误情况下，包括网络延迟、分区、丢包、冗余和乱序等错误都可以保证正确。 可用性：集群中只要有大多数的机器可运行并且能够相互通信、和客户端通信，就可以保证可用。因此，一个典型的包含 5 个节点的集群可以容忍两个节点的失败。服务器被停止就认为是失败。他们当有稳定的存储的时候可以从状态中恢复回来并重新加入集群。 不依赖时序来保证一致性：物理时钟错误或者极端的消息延迟在可能只有在最坏情况下才会导致可用性问题。 通常情况下，一条指令可以尽可能快的在集群中大多数节点响应一轮远程过程调用时完成。小部分比较慢的节点不会影响系统整体的性能。 3 Paxos 算法的问题在过去的 10 年里，Leslie Lamport 的Paxos算法几乎已经成为一致性的代名词Paxos是在课程教学中最经常使用的算法，同时也是大多数一致性算法实现的起点。Paxos首先定义了一个能够达成单一决策一致的协议，比如单条的复制日志项。我们把这一子集叫做单决策Paxos。然后通过组合多个Paxos协议的实例来促进一系列决策的达成。Paxos保证安全性和活性，同时也支持集群成员关系的变更。Paxos的正确性已经被证明，在通常情况下也很高效。不幸的是，Paxos有两个明显的缺点。第一个缺点是Paxos算法特别的难以理解。完整的解释是出了名的不透明；通过极大的努力之后，也只有少数人成功理解了这个算法。因此，有了几次用更简单的术语来解释Paxos的尝试。尽管这些解释都只关注了单决策的子集问题，但依然很具有挑战性。在 2012 年 NSDI 的会议中的一次调查显示，很少有人对Paxos算法感到满意，甚至在经验老道的研究者中也是如此。我们自己也尝试去理解 Paxos；我们一直没能理解Paxos直到我们读了很多对Paxos的简化解释并且设计了我们自己的算法之后，这一过程花了近一年时间。我们假设Paxos的不透明性来自它选择单决策问题作为它的基础。单决策Paxos是晦涩微妙的，它被划分成了两种没有简单直观解释和无法独立理解的情景。因此，这导致了很难建立起直观的感受为什么单决策Paxos算法能够工作。构成多决策Paxos增加了很多错综复杂的规则。我们相信，在多决策上达成一致性的问题（一份日志而不是单一的日志记录）能够被分解成其他的方式并且更加直接和明显。Paxos算法的第二个问题就是它没有提供一个足够好的用来构建一个现实系统的基础。一个原因是还没有一种被广泛认同的多决策问题的算法。Lamport 的描述基本上都是关于单决策Paxos的；他简要描述了实施多决策Paxos的方法，但是缺乏很多细节。当然也有很多具体化Paxos的尝试，但是他们都互相不一样，和Paxos的概述也不同。例如 Chubby 这样的系统实现了一个类似于Paxos的算法，但是大多数的细节并没有被公开。而且，Paxos算法的结构也不是十分易于构建实践的系统；单决策分解也会产生其他的结果。例如，独立的选择一组日志条目然后合并成一个序列化的日志并没有带来太多的好处，仅仅增加了不少复杂性。围绕着日志来设计一个系统是更加简单高效的；新日志条目以严格限制的顺序增添到日志中去。另一个问题是，Paxos使用了一种对等的点对点的方式作为它的核心（尽管它最终提议了一种弱领导人的方法来优化性能）。在只有一个决策会被制定的简化世界中是很有意义的，但是很少有现实的系统使用这种方式。如果有一系列的决策需要被制定，首先选择一个领导人，然后让他去协调所有的决议，会更加简单快速。因此，实际的系统中很少有和Paxos相似的实践。每一种实现都是从Paxos开始研究，然后发现很多实现上的难题，再然后开发了一种和Paxos明显不一样的结构。这样是非常费时和容易出错的，并且理解Paxos的难度使得这个问题更加糟糕。Paxos算法在理论上被证明是正确可行的，但是现实的系统和Paxos差别是如此的大，以至于这些证明没有什么太大的价值。下面来自 Chubby 实现非常典型： 在Paxos算法描述和实现现实系统中间有着巨大的鸿沟。最终的系统建立在一种没有经过证明的算法之上。 由于以上问题，我们认为Paxos算法既没有提供一个良好的基础给实践的系统，也没有给教学很好的帮助。基于一致性问题在大规模软件系统中的重要性，我们决定看看我们是否可以设计一个拥有更好特性的替代Paxos的一致性算法。Raft算法就是这次实验的结果。 4 为了可理解性的设计设计Raft算法我们有几个初衷：它必须提供一个完整的实际的系统实现基础，这样才能大大减少开发者的工作；它必须在任何情况下都是安全的并且在大多数的情况下都是可用的；并且它的大部分操作必须是高效的。但是我们最重要也是最大的挑战是可理解性。它必须保证对于普遍的人群都可以十分容易的去理解。另外，它必须能够让人形成直观的认识，这样系统的构建者才能够在现实中进行必然的扩展。在设计Raft算法的时候，有很多的点需要我们在各种备选方案中进行选择。在这种情况下，我们评估备选方案基于可理解性原则：解释各个备选方案有多大的难度（例如，Raft的状态空间有多复杂，是否有微妙的暗示）？对于一个读者而言，完全理解这个方案和暗示是否容易？我们意识到对这种可理解性分析上具有高度的主观性；尽管如此，我们使用了两种通常适用的技术来解决这个问题。第一个技术就是众所周知的问题分解：只要有可能，我们就将问题分解成几个相对独立的，可被解决的、可解释的和可理解的子问题。例如，Raft算法被我们分成领导人选举，日志复制，安全性和角色改变几个部分。我们使用的第二个方法是通过减少状态的数量来简化需要考虑的状态空间，使得系统更加连贯并且在可能的时候消除不确定性。特别的，所有的日志是不允许有空洞的，并且Raft限制了日志之间变成不一致状态的可能。尽管在大多数情况下我们都试图去消除不确定性，但是也有一些情况下不确定性可以提升可理解性。尤其是，随机化方法增加了不确定性，但是他们有利于减少状态空间数量，通过处理所有可能选择时使用相似的方法。我们使用随机化去简化Raft中领导人选举算法。 5 Raft 一致性算法Raft是一种用来管理章节 2 中描述的复制日志的算法。图 2 为了参考之用，总结这个算法的简略版本，图 3 列举了这个算法的一些关键特性。图中的这些元素会在剩下的章节逐一介绍。Raft通过选举一个高贵的领导人，然后给予他全部的管理复制日志的责任来实现一致性。领导人从客户端接收日志条目，把日志条目复制到其他服务器上，并且当保证安全性的时候告诉其他的服务器应用日志条目到他们的状态机中。拥有一个领导人大大简化了对复制日志的管理。例如，领导人可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议，并且数据都从领导人流向其他服务器。一个领导人可以宕机，可以和其他服务器失去连接，这时一个新的领导人会被选举出来。通过领导人的方式，Raft将一致性问题分解成了三个相对独立的子问题，这些问题会在接下来的子章节中进行讨论： 领导选举：一个新的领导人需要被选举出来，当现存的领导人宕机的时候（章节 5.2） 日志复制：领导人必须从客户端接收日志然后复制到集群中的其他节点，并且强制要求其他节点的日志保持和自己相同。 安全性：在Raft中安全性的关键是在图 3 中展示的状态机安全：如果有任何的服务器节点已经应用了一个确定的日志条目到它的状态机中，那么其他服务器节点不能在同一个日志索引位置应用一个不同的指令。章节 5.4 阐述了Raft算法是如何保证这个特性的；这个解决方案涉及到一个额外的选举机制（5.2 节）上的限制。 在展示一致性算法之后，这一章节会讨论可用性的一些问题和系统中的候选人角色的问题。 状态： 状态 所有服务器上持久存在的 currentTerm 服务器最后一次知道的任期号（初始化为 0，持续递增） votedFor 在当前获得选票的候选人的 Id log[] 日志条目集；每一个条目包含一个用户状态机执行的指令，和收到时的任期号 状态 所有服务器上经常变的 commitIndex 已知的最大的已经被提交的日志条目的索引值 lastApplied 最后被应用到状态机的日志条目索引值（初始化为 0，持续递增） 状态 在领导人里经常改变的 （选举后重新初始化） nextIndex[] 对于每一个服务器，需要发送给他的下一个日志条目的索引值（初始化为领导人最后索引值加一） matchIndex[] 对于每一个服务器，已经复制给他的日志的最高索引值 附加日志 RPC： 由领导人负责调用来复制日志指令；也会用作heartbeat 参数 解释 term 领导人的任期号 leaderId 领导人的 Id，以便于跟随者重定向请求 prevLogIndex 新的日志条目紧随之前的索引值 prevLogTerm prevLogIndex 条目的任期号 entries[] 准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率） leaderCommit 领导人已经提交的日志的索引值 返回值 解释 term 当前的任期号，用于领导人去更新自己 success 跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真 接收者实现： 如果 term &lt; currentTerm 就返回 false （5.1 节） 如果日志在 prevLogIndex 位置处的日志条目的任期号和 prevLogTerm 不匹配，则返回 false （5.3 节） 如果已经存在的日志条目和新的产生冲突（索引值相同但是任期号不同），删除这一条和之后所有的 （5.3 节） 附加任何在已有的日志中不存在的条目 如果 leaderCommit &gt; commitIndex，令 commitIndex 等于 leaderCommit 和 新日志条目索引值中较小的一个 请求投票 RPC： 由候选人负责调用用来征集选票（5.2 节） 参数 解释 term 候选人的任期号 candidateId 请求选票的候选人的 Id lastLogIndex 候选人的最后日志条目的索引值 lastLogTerm 候选人最后日志条目的任期号 返回值 解释 term 当前任期号，以便于候选人去更新自己的任期号 voteGranted 候选人赢得了此张选票时为真 接收者实现： 如果term &lt; currentTerm返回 false （5.2 节） 如果 votedFor 为空或者就是 candidateId，并且候选人的日志至少和自己一样新，那么就投票给他（5.2 节，5.4 节） 所有服务器需遵守的规则：所有服务器： 如果commitIndex &gt; lastApplied，那么就 lastApplied 加一，并把log[lastApplied]应用到状态机中（5.3 节） 如果接收到的 RPC 请求或响应中，任期号T &gt; currentTerm，那么就令 currentTerm 等于 T，并切换状态为跟随者（5.1 节） 跟随者（5.2 节）： 响应来自候选人和领导者的请求 如果在超过选举超时时间的情况之前都没有收到领导人的心跳，或者是候选人请求投票的，就自己变成候选人 候选人（5.2 节）： 在转变成候选人后就立即开始选举过程 自增当前的任期号（currentTerm） 给自己投票 重置选举超时计时器 发送请求投票的 RPC 给其他所有服务器 如果接收到大多数服务器的选票，那么就变成领导人 如果接收到来自新的领导人的附加日志 RPC，转变成跟随者 如果选举过程超时，再次发起一轮选举 领导人： 一旦成为领导人：发送空的附加日志 RPC（心跳）给其他所有的服务器；在一定的空余时间之后不停的重复发送，以阻止跟随者超时（5.2 节） 如果接收到来自客户端的请求：附加条目到本地日志中，在条目被应用到状态机后响应客户端（5.3 节） 如果对于一个跟随者，最后日志条目的索引值大于等于 nextIndex，那么：发送从 nextIndex 开始的所有日志条目： 如果成功：更新相应跟随者的 nextIndex 和 matchIndex 如果因为日志不一致而失败，减少 nextIndex 重试 如果存在一个满足N &gt; commitIndex的 N，并且大多数的matchIndex[i] ≥ N成立，并且log[N].term == currentTerm成立，那么令 commitIndex 等于这个 N （5.3 和 5.4 节） 图 2：一个关于Raft一致性算法的浓缩总结（不包括成员变换和日志压缩）。 特性 解释 选举安全特性 对于一个给定的任期号，最多只会有一个领导人被选举出来（5.2 节） 领导人只附加原则 领导人绝对不会删除或者覆盖自己的日志，只会增加（5.3 节） 日志匹配原则 如果两个日志在相同的索引位置的日志条目的任期号相同，那么我们就认为这个日志从头到这个索引位置之间全部完全相同（5.3 节） 领导人完全特性 如果某个日志条目在某个任期号中已经被提交，那么这个条目必然出现在更大任期号的所有领导人中（5.4 节） 状态机安全特性 如果一个领导人已经在给定的索引值位置的日志条目应用到状态机中，那么其他任何的服务器在这个索引位置不会提交一个不同的日志（5.4.3 节） 图 3：Raft在任何时候都保证以上的各个特性。 5.1 Raft 基础一个Raft集群包含若干个服务器节点；通常是 5 个，这允许整个系统容忍 2 个节点的失效。在任何时刻，每一个服务器节点都处于这三个状态之一：领导人、跟随者或者候选人。在通常情况下，系统中只有一个领导人并且其他的节点全部都是跟随者。跟随者都是被动的：他们不会发送任何请求，只是简单的响应来自领导者或者候选人的请求。领导人处理所有的客户端请求（如果一个客户端和跟随者联系，那么跟随者会把请求重定向给领导人）。第三种状态，候选人，是用来在 5.2 节描述的选举新领导人时使用。图 4 展示了这些状态和他们之间的转换关系；这些转换关系会在接下来进行讨论。 图 4：服务器状态。跟随者只响应来自其他服务器的请求。如果跟随者接收不到消息，那么他就会变成候选人并发起一次选举。获得集群中大多数选票的候选人将成为领导者。在一个任期内，领导人一直都会是领导人直到自己宕机了。 图 5：时间被划分成一个个的任期，每个任期开始都是一次选举。在选举成功后，领导人会管理整个集群直到任期结束。有时候选举会失败，那么这个任期就会没有领导人而结束。任期之间的切换可以在不同的时间不同的服务器上观察到。 Raft把时间分割成任意长度的任期，如图 5。任期用连续的整数标记。每一段任期从一次选举开始，就像章节 5.2 描述的一样，一个或者多个候选人尝试成为领导者。如果一个候选人赢得选举，然后他就在接下来的任期内充当领导人的职责。在某些情况下，一次选举过程会造成选票的瓜分。在这种情况下，这一任期会以没有领导人结束；一个新的任期（和一次新的选举）会很快重新开始。Raft保证了在一个给定的任期内，最多只有一个领导者。不同的服务器节点可能多次观察到任期之间的转换，但在某些情况下，一个节点也可能观察不到任何一次选举或者整个任期全程。任期在Raft算法中充当逻辑时钟的作用，这会允许服务器节点查明一些过期的信息比如陈旧的领导者。每一个节点存储一个当前任期号，这一编号在整个时期内单调的增长。当服务器之间通信的时候会交换当前任期号；如果一个服务器的当前任期号比其他人小，那么他会更新自己的编号到较大的编号值。如果一个候选人或者领导者发现自己的任期号过期了，那么他会立即恢复成跟随者状态。如果一个节点接收到一个包含过期的任期号的请求，那么他会直接拒绝这个请求。Raft算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs。请求投票（RequestVote） RPCs 由候选人在选举期间发起（章节 5.2），然后附加条目（AppendEntries）RPCs 由领导人发起，用来复制日志和提供一种心跳机制（章节 5.3）。第 7 节为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPCs 来获得最佳的性能。 5.2 领导人选举Raft使用一种心跳机制来触发领导人选举。当服务器程序启动时，他们都是跟随者身份。一个服务器节点继续保持着跟随者状态只要他从领导人或者候选者处接收到有效的 RPCs。领导者周期性的向所有跟随者发送心跳包（即不包含日志项内容的附加日志项 RPCs）来维持自己的权威。如果一个跟随者在一段时间里没有接收到任何消息，也就是选举超时，那么他就会认为系统中没有可用的领导者,并且发起选举以选出新的领导者。要开始一次选举过程，跟随者先要增加自己的当前任期号并且转换到候选人状态。然后他会并行的向集群中的其他服务器节点发送请求投票的 RPCs 来给自己投票。候选人会继续保持着当前状态直到以下三件事情之一发生：(a) 他自己赢得了这次的选举，(b) 其他的服务器成为领导者，(c) 一段时间之后没有任何一个获胜的人。这些结果会分别的在下面的段落里进行讨论。当一个候选人从整个集群的大多数服务器节点获得了针对同一个任期号的选票，那么他就赢得了这次选举并成为领导人。每一个服务器最多会对一个任期号投出一张选票，按照先来先服务的原则（注意：5.4 节在投票上增加了一点额外的限制）。要求大多数选票的规则确保了最多只会有一个候选人赢得此次选举（图 3 中的选举安全性）。一旦候选人赢得选举，他就立即成为领导人。然后他会向其他的服务器发送心跳消息来建立自己的权威并且阻止新的领导人的产生。在等待投票的时候，候选人可能会从其他的服务器接收到声明它是领导人的附加日志项 RPC。如果这个领导人的任期号（包含在此次的 RPC中）不小于候选人当前的任期号，那么候选人会承认领导人合法并回到跟随者状态。 如果此次 RPC 中的任期号比自己小，那么候选人就会拒绝这次的 RPC 并且继续保持候选人状态。第三种可能的结果是候选人既没有赢得选举也没有输：如果有多个跟随者同时成为候选人，那么选票可能会被瓜分以至于没有候选人可以赢得大多数人的支持。当这种情况发生的时候，每一个候选人都会超时，然后通过增加当前任期号来开始一轮新的选举。然而，没有其他机制的话，选票可能会被无限的重复瓜分。Raft算法使用随机选举超时时间的方法来确保很少会发生选票瓜分的情况，就算发生也能很快的解决。为了阻止选票起初就被瓜分，选举超时时间是从一个固定的区间（例如 150-300 毫秒）随机选择。这样可以把服务器都分散开以至于在大多数情况下只有一个服务器会选举超时；然后他赢得选举并在其他服务器超时之前发送心跳包。同样的机制被用在选票瓜分的情况下。每一个候选人在开始一次选举的时候会重置一个随机的选举超时时间，然后在超时时间内等待投票的结果；这样减少了在新的选举中另外的选票瓜分的可能性。9.3 节展示了这种方案能够快速的选出一个领导人。领导人选举这个例子，体现了可理解性原则是如何指导我们进行方案设计的。起初我们计划使用一种排名系统：每一个候选人都被赋予一个唯一的排名，供候选人之间竞争时进行选择。如果一个候选人发现另一个候选人拥有更高的排名，那么他就会回到跟随者状态，这样高排名的候选人能够更加容易的赢得下一次选举。但是我们发现这种方法在可用性方面会有一点问题（如果高排名的服务器宕机了，那么低排名的服务器可能会超时并再次进入候选人状态。而且如果这个行为发生得足够快，则可能会导致整个选举过程都被重置掉）。我们针对算法进行了多次调整，但是每次调整之后都会有新的问题。最终我们认为随机重试的方法是更加明显和易于理解的。 5.3 日志复制一旦一个领导人被选举出来，他就开始为客户端提供服务。客户端的每一个请求都包含一条被复制状态机执行的指令。领导人把这条指令作为一条新的日志条目附加到日志中去，然后并行的发起附加条目 RPCs 给其他的服务器，让他们复制这条日志条目。当这条日志条目被安全的复制（下面会介绍），领导人会应用这条日志条目到它的状态机中然后把执行的结果返回给客户端。如果跟随者崩溃或者运行缓慢，再或者网络丢包，领导人会不断的重复尝试附加日志条目 RPCs （尽管已经回复了客户端）直到所有的跟随者都最终存储了所有的日志条目。 图 6：日志由有序序号标记的条目组成。每个条目都包含创建时的任期号（图中框中的数字），和一个状态机需要执行的指令。一个条目当可以安全的被应用到状态机中去的时候，就认为是可以提交了。 日志以图 6 展示的方式组织。每一个日志条目存储一条状态机指令和从领导人收到这条指令时的任期号。日志中的任期号用来检查是否出现不一致的情况，同时也用来保证图 3 中的某些性质。每一条日志条目同时也都有一个整数索引值来表明它在日志中的位置。领导人来决定什么时候把日志条目应用到状态机中是安全的；这种日志条目被称为已提交。Raft算法保证所有已提交的日志条目都是持久化的并且最终会被所有可用的状态机执行。在领导人将创建的日志条目复制到大多数的服务器上的时候，日志条目就会被提交（例如在图 6 中的条目 7）。同时，领导人的日志中之前的所有日志条目也都会被提交，包括由其他领导人创建的条目。5.4 节会讨论某些当在领导人改变之后应用这条规则的隐晦内容，同时他也展示了这种提交的定义是安全的。领导人跟踪了最大的将会被提交的日志项的索引，并且索引值会被包含在未来的所有附加日志 RPCs （包括心跳包），这样其他的服务器才能最终知道领导人的提交位置。一旦跟随者知道一条日志条目已经被提交，那么他也会将这个日志条目应用到本地的状态机中（按照日志的顺序）。我们设计了Raft的日志机制来维护一个不同服务器的日志之间的高层次的一致性。这么做不仅简化了系统的行为也使得更加可预计，同时他也是安全性保证的一个重要组件。Raft维护着以下的特性，这些同时也组成了图 3 中的日志匹配特性： 如果在不同的日志中的两个条目拥有相同的索引和任期号，那么他们存储了相同的指令。 如果在不同的日志中的两个条目拥有相同的索引和任期号，那么他们之前的所有日志条目也全部相同。 第一个特性来自这样的一个事实，领导人最多在一个任期里在指定的一个日志索引位置创建一条日志条目，同时日志条目在日志中的位置也从来不会改变。第二个特性由附加日志 RPC 的一个简单的一致性检查所保证。在发送附加日志 RPC 的时候，领导人会把新的日志条目紧接着之前的条目的索引位置和任期号包含在里面。如果跟随者在它的日志中找不到包含相同索引位置和任期号的条目，那么他就会拒绝接收新的日志条目。一致性检查就像一个归纳步骤：一开始空的日志状态肯定是满足日志匹配特性的，然后一致性检查保护了日志匹配特性当日志扩展的时候。因此，每当附加日志 RPC 返回成功时，领导人就知道跟随者的日志一定是和自己相同的了。在正常的操作中，领导人和跟随者的日志保持一致性，所以附加日志 RPC 的一致性检查从来不会失败。然而，领导人崩溃的情况会使得日志处于不一致的状态（老的领导人可能还没有完全复制所有的日志条目）。这种不一致问题会在领导人和跟随者的一系列崩溃下加剧。图 7 展示了跟随者的日志可能和新的领导人不同的方式。跟随者可能会丢失一些在新的领导人中有的日志条目，他也可能拥有一些领导人没有的日志条目，或者两者都发生。丢失或者多出日志条目可能会持续多个任期。 图 7：当一个领导人成功当选时，跟随者可能是任何情况（a-f）。每一个盒子表示是一个日志条目；里面的数字表示任期号。跟随者可能会缺少一些日志条目（a-b），可能会有一些未被提交的日志条目（c-d），或者两种情况都存在（e-f）。例如，场景 f 可能会这样发生，某服务器在任期 2 的时候是领导人，已附加了一些日志条目到自己的日志中，但在提交之前就崩溃了；很快这个机器就被重启了，在任期 3 重新被选为领导人，并且又增加了一些日志条目到自己的日志中；在任期 2 和任期 3 的日志被提交之前，这个服务器又宕机了，并且在接下来的几个任期里一直处于宕机状态。 在Raft算法中，领导人处理不一致是通过强制跟随者直接复制自己的日志来解决了。这意味着在跟随者中的冲突的日志条目会被领导人的日志覆盖。5.4 节会阐述如何通过增加一些限制来使得这样的操作是安全的。要使得跟随者的日志进入和自己一致的状态，领导人必须找到最后两者达成一致的地方，然后删除从那个点之后的所有日志条目，发送自己的日志给跟随者。所有的这些操作都在进行附加日志 RPCs 的一致性检查时完成。领导人针对每一个跟随者维护了一个 nextIndex，这表示下一个需要发送给跟随者的日志条目的索引地址。当一个领导人刚获得权力的时候，他初始化所有的 nextIndex 值为自己的最后一条日志的index加1（图 7 中的 11）。如果一个跟随者的日志和领导人不一致，那么在下一次的附加日志 RPC 时的一致性检查就会失败。在被跟随者拒绝之后，领导人就会减小 nextIndex 值并进行重试。最终 nextIndex 会在某个位置使得领导人和跟随者的日志达成一致。当这种情况发生，附加日志 RPC 就会成功，这时就会把跟随者冲突的日志条目全部删除并且加上领导人的日志。一旦附加日志 RPC 成功，那么跟随者的日志就会和领导人保持一致，并且在接下来的任期里一直继续保持。如果需要的话，算法可以通过减少被拒绝的附加日志 RPCs 的次数来优化。例如，当附加日志 RPC 的请求被拒绝的时候，跟随者可以包含冲突的条目的任期号和自己存储的那个任期的最早的索引地址。借助这些信息，领导人可以减小 nextIndex 越过所有那个任期冲突的所有日志条目；这样就变成每个任期需要一次附加条目 RPC 而不是每个条目一次。在实践中，我们十分怀疑这种优化是否是必要的，因为失败是很少发生的并且也不大可能会有这么多不一致的日志。通过这种机制，领导人在获得权力的时候就不需要任何特殊的操作来恢复一致性。他只需要进行正常的操作，然后日志就能自动的在回复附加日志 RPC 的一致性检查失败的时候自动趋于一致。领导人从来不会覆盖或者删除自己的日志（图 3 的领导人只附加特性）。日志复制机制展示出了第 2 节中形容的一致性特性：Raft能够接受，复制并应用新的日志条目只要大部分的机器是工作的；在通常的情况下，新的日志条目可以在一次 RPC 中被复制给集群中的大多数机器；并且单个的缓慢的跟随者不会影响整体的性能。 5.4 安全性前面的章节里描述了Raft算法是如何选举和复制日志的。然而，到目前为止描述的机制并不能充分的保证每一个状态机会按照相同的顺序执行相同的指令。例如，一个跟随者可能会进入不可用状态同时领导人已经提交了若干的日志条目，然后这个跟随者可能会被选举为领导人并且覆盖这些日志条目；因此，不同的状态机可能会执行不同的指令序列。这一节通过在领导选举的时候增加一些限制来完善Raft算法。这一限制保证了任何的领导人对于给定的任期号，都拥有了之前任期的所有被提交的日志条目（图 3 中的领导人完整特性）。增加这一选举时的限制，我们对于提交时的规则也更加清晰。最终，我们将展示对于领导人完整特性的简要证明，并且说明领导人是如何领导复制状态机的做出正确行为的。 5.4.1 选举限制在任何基于领导人的一致性算法中，领导人都必须存储所有已经提交的日志条目。在某些一致性算法中，例如 Viewstamped Replication，某个节点即使是一开始并没有包含所有已经提交的日志条目，它也能被选为领导者。这些算法都包含一些额外的机制来识别丢失的日志条目并把他们传送给新的领导人，要么是在选举阶段要么在之后很快进行。不幸的是，这种方法会导致相当大的额外的机制和复杂性。Raft使用了一种更加简单的方法，它可以保证所有之前的任期号中已经提交的日志条目在选举的时候都会出现在新的领导人中，不需要传送这些日志条目给领导人。这意味着日志条目的传送是单向的，只从领导人传给跟随者，并且领导人从不会覆盖自身本地日志中已经存在的条目。Raft使用投票的方式来阻止一个候选人赢得选举除非这个候选人包含了所有已经提交的日志条目。候选人为了赢得选举必须联系集群中的大部分节点，这意味着每一个已经提交的日志条目在这些服务器节点中肯定存在于至少一个节点上。如果候选人的日志至少和大多数的服务器节点一样新（这个新的定义会在下面讨论），那么他一定持有了所有已经提交的日志条目。请求投票 RPC 实现了这样的限制： RPC 中包含了候选人的日志信息，然后投票人会拒绝掉那些日志没有自己新的投票请求。Raft通过比较两份日志中最后一条日志条目的索引值和任期号定义谁的日志比较新。如果两份日志最后的条目的任期号不同，那么任期号大的日志更加新。如果两份日志最后的条目任期号相同，那么日志比较长的那个就更加新。 5.4.2 提交之前任期内的日志条目如同 5.3 节介绍的那样，领导人知道一条当前任期内的日志记录是可以被提交的，只要它被存储到了大多数的服务器上。如果一个领导人在提交日志条目之前崩溃了，未来后续的领导人会继续尝试复制这条日志记录。然而，一个领导人不能断定一个之前任期里的日志条目被保存到大多数服务器上的时候就一定已经提交了。图 8 展示了一种情况，一条已经被存储到大多数节点上的老日志条目，也依然有可能会被未来的领导人覆盖掉。 图 8：如图的时间序列展示了为什么领导人无法决定对老任期号的日志条目进行提交。在 (a) 中，S1 是领导者，部分的复制了索引位置 2 的日志条目。在 (b) 中，S1 崩溃了，然后 S5 在任期 3 里通过 S3、S4 和自己的选票赢得选举，然后从客户端接收了一条不一样的日志条目放在了索引 2 处。然后到 (c)，S5 又崩溃了；S1 重新启动，选举成功，开始复制日志。在这时，来自任期 2 的那条日志已经被复制到了集群中的大多数机器上，但是还没有被提交。如果 S1 在 (d) 中又崩溃了，S5 可以重新被选举成功（通过来自 S2，S3 和 S4 的选票），然后覆盖了他们在索引 2 处的日志。反之，如果在崩溃之前，S1 把自己主导的新任期里产生的日志条目复制到了大多数机器上，就如 (e) 中那样，那么在后面任期里面这些新的日志条目就会被提交（因为S5 就不可能选举成功）。 这样在同一时刻就同时保证了，之前的所有老的日志条目就会被提交。 为了消除图 8 里描述的情况，Raft永远不会通过计算副本数目的方式去提交一个之前任期内的日志条目。只有领导人当前任期里的日志条目通过计算副本数目可以被提交；一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配特性，之前的日志条目也都会被间接的提交。在某些情况下，领导人可以安全的知道一个老的日志条目是否已经被提交（例如，该条目是否存储到所有服务器上），但是Raft为了简化问题使用一种更加保守的方法。当领导人复制之前任期里的日志时，Raft会为所有日志保留原始的任期号, 这在提交规则上产生了额外的复杂性。在其他的一致性算法中，如果一个新的领导人要重新复制之前的任期里的日志时，它必须使用当前新的任期号。Raft使用的方法更加容易辨别出日志，因为它可以随着时间和日志的变化对日志维护着同一个任期编号。另外，和其他的算法相比，Raft中的新领导人只需要发送更少日志条目（其他算法中必须在他们被提交之前发送更多的冗余日志条目来为他们重新编号）。 5.4.3 安全性论证在给定了完整的Raft算法之后，我们现在可以更加精确的讨论领导人完整性特性（这一讨论基于 9.2 节的安全性证明）。我们假设领导人完全性特性是不存在的，然后我们推出矛盾来。假设任期 T 的领导人（领导人 T）在任期内提交了一条日志条目，但是这条日志条目没有被存储到未来某个任期的领导人的日志中。设大于 T 的最小任期 U 的领导人 U 没有这条日志条目。 图 9：如果 S1 （任期 T 的领导者）提交了一条新的日志在它的任期里，然后 S5 在之后的任期 U 里被选举为领导人，然后至少会有一个机器，如 S3，既拥有来自 S1 的日志，也给 S5 投票了。 在领导人 U 选举的时候一定没有那条被提交的日志条目（领导人从不会删除或者覆盖任何条目）。 领导人 T 复制这条日志条目给集群中的大多数节点，同时，领导人U 从集群中的大多数节点赢得了选票。因此，至少有一个节点（投票者、选民）同时接受了来自领导人T 的日志条目，并且给领导人U 投票了，如图 9。这个投票者是产生这个矛盾的关键。 这个投票者必须在给领导人 U 投票之前先接受了从领导人 T 发来的已经被提交的日志条目；否则他就会拒绝来自领导人 T 的附加日志请求（因为此时他的任期号会比 T 大）。 投票者在给领导人 U 投票时依然保有这条日志条目，因为任何中间的领导人都包含该日志条目（根据上述的假设），领导人从不会删除条目，并且跟随者只有和领导人冲突的时候才会删除条目。 投票者把自己选票投给领导人 U 时，领导人 U 的日志必须和投票者自己一样新。这就导致了两者矛盾之一。 首先，如果投票者和领导人 U 的最后一条日志的任期号相同，那么领导人 U 的日志至少和投票者一样长，所以领导人 U 的日志一定包含所有投票者的日志。这是另一处矛盾，因为投票者包含了那条已经被提交的日志条目，但是在上述的假设里，领导人 U 是不包含的。 除此之外，领导人 U 的最后一条日志的任期号就必须比投票人大了。此外，他也比 T 大，因为投票人的最后一条日志的任期号至少和 T 一样大（他包含了来自任期 T 的已提交的日志）。创建了领导人 U 最后一条日志的之前领导人一定已经包含了那条被提交的日志（根据上述假设，领导人 U 是第一个不包含该日志条目的领导人）。所以，根据日志匹配特性，领导人 U 一定也包含那条被提交当然日志，这里产生矛盾。 这里完成了矛盾。因此，所有比 T 大的领导人一定包含了所有来自 T 的已经被提交的日志。 日志匹配原则保证了未来的领导人也同时会包含被间接提交的条目，例如图 8 (d) 中的索引 2。 通过领导人完全特性，我们就能证明图 3 中的状态机安全特性，即如果已经服务器已经在某个给定的索引值应用了日志条目到自己的状态机里，那么其他的服务器不会应用一个不一样的日志到同一个索引值上。在一个服务器应用一条日志条目到他自己的状态机中时，他的日志必须和领导人的日志，在该条目和之前的条目上相同，并且已经被提交。现在我们来考虑在任何一个服务器应用一个指定索引位置的日志的最小任期；日志完全特性保证拥有更高任期号的领导人会存储相同的日志条目，所以之后的任期里应用某个索引位置的日志条目也会是相同的值。因此，状态机安全特性是成立的。最后，Raft要求服务器按照日志中索引位置顺序应用日志条目。和状态机安全特性结合起来看，这就意味着所有的服务器会应用相同的日志序列集到自己的状态机中，并且是按照相同的顺序。 5.5 跟随者和候选人崩溃到目前为止，我们都只关注了领导人崩溃的情况。跟随者和候选人崩溃后的处理方式比领导人要简单的多，并且他们的处理方式是相同的。如果跟随者或者候选人崩溃了，那么后续发送给他们的 RPCs 都会失败。Raft中处理这种失败就是简单的通过无限的重试；如果崩溃的机器重启了，那么这些 RPC 就会完整的成功。如果一个服务器在完成了一个 RPC，但是还没有响应的时候崩溃了，那么在他重新启动之后就会再次收到同样的请求。Raft的 RPCs 都是幂等的，所以这样重试不会造成任何问题。例如一个跟随者如果收到附加日志请求但是他已经包含了这一日志，那么他就会直接忽略这个新的请求。 5.6 时间和可用性Raft的要求之一就是安全性不能依赖时间：整个系统不能因为某些事件运行的比预期快一点或者慢一点就产生了错误的结果。但是，可用性（系统可以及时的响应客户端）不可避免的要依赖于时间。例如，如果消息交换比服务器故障间隔时间长，候选人将没有足够长的时间来赢得选举；没有一个稳定的领导人，Raft将无法工作。领导人选举是Raft中对时间要求最为关键的方面。Raft可以选举并维持一个稳定的领导人,只要系统满足下面的时间要求： 广播时间（broadcastTime） &lt;&lt; 选举超时时间（electionTimeout） &lt;&lt; 平均故障间隔时间（MTBF） 在这个不等式中，广播时间指的是从一个服务器并行的发送 RPCs 给集群中的其他服务器并接收响应的平均时间；选举超时时间就是在 5.2 节中介绍的选举的超时时间限制；然后平均故障间隔时间就是对于一台服务器而言，两次故障之间的平均时间。广播时间必须比选举超时时间小一个量级，这样领导人才能够发送稳定的心跳消息来阻止跟随者开始进入选举状态；通过随机化选举超时时间的方法，这个不等式也使得选票瓜分的情况变得不可能。选举超时时间应该要比平均故障间隔时间小上几个数量级，这样整个系统才能稳定的运行。当领导人崩溃后，整个系统会大约相当于选举超时的时间里不可用；我们希望这种情况在整个系统的运行中很少出现。广播时间和平均故障间隔时间是由系统决定的，但是选举超时时间是我们自己选择的。Raft的 RPCs 需要接收方将信息持久化的保存到稳定存储中去，所以广播时间大约是 0.5 毫秒到 20 毫秒，取决于存储的技术。因此，选举超时时间可能需要在 10 毫秒到 500 毫秒之间。大多数的服务器的平均故障间隔时间都在几个月甚至更长，很容易满足时间的需求。 6 集群成员变化到目前为止，我们都假设集群的配置（加入到一致性算法的服务器集合）是固定不变的。但是在实践中，偶尔是会改变集群的配置的，例如替换那些宕机的机器或者改变复制级别。尽管可以通过暂停整个集群，更新所有配置，然后重启整个集群的方式来实现，但是在更改的时候集群会不可用。另外，如果存在手工操作步骤，那么就会有操作失误的风险。为了避免这样的问题，我们决定自动化配置改变并且将其纳入到Raft一致性算法中来。为了让配置修改机制能够安全，那么在转换的过程中不能够存在任何时间点使得两个领导人同时被选举成功在同一个任期里。不幸的是，任何服务器直接从旧的配置直接转换到新的配置的方案都是不安全的。一次性自动的转换所有服务器是不可能的，所以在转换期间整个集群存在划分成两个独立的大多数群体的可能性（见图 10）。 图 10：直接从一种配置转到新的配置是十分不安全的，因为各个机器可能在任何的时候进行转换。在这个例子中，集群配额从 3 台机器变成了 5 台。不幸的是，存在这样的一个时间点，两个不同的领导人在同一个任期里都可以被选举成功。一个是通过旧的配置，一个通过新的配置。 为了保证安全性，配置更改必须使用两阶段方法。目前有很多种两阶段的实现。例如，有些系统在第一阶段停掉旧的配置所以集群就不能处理客户端请求；然后在第二阶段在启用新的配置。在Raft中，集群先切换到一个过渡的配置，我们称之为共同一致；一旦共同一致已经被提交了，那么系统就切换到新的配置上。共同一致是老配置和新配置的结合： 日志条目被复制给集群中新、老配置的所有服务器。 新、旧配置的服务器都可以成为领导人。 达成一致（针对选举和提交）需要分别在两种配置上获得大多数的支持。 共同一致允许独立的服务器在不影响安全性的前提下，在不同的时间进行配置转换过程。此外，共同一致可以让集群在配置转换的过程人依然响应客户端的请求。集群配置在复制日志中以特殊的日志条目来存储和通信；图 11 展示了配置转换的过程。当一个领导人接收到一个改变配置从 C-old 到 C-new 的请求，他会为了共同一致存储配置（图中的 C-old,new），以前面描述的日志条目和副本的形式。一旦一个服务器将新的配置日志条目增加到它的日志中，他就会用这个配置来做出未来所有的决定（服务器总是使用最新的配置，无论他是否已经被提交）。这意味着领导人要使用 C-old,new 的规则来决定日志条目 C-old,new 什么时候需要被提交。如果领导人崩溃了，被选出来的新领导人可能是使用 C-old 配置也可能是 C-old,new 配置，这取决于赢得选举的候选人是否已经接收到了 C-old,new 配置。在任何情况下， C-new 配置在这一时期都不会单方面的做出决定。一旦 C-old,new 被提交，那么无论是 C-old 还是 C-new，在没有经过他人批准的情况下都不可能做出决定，并且领导人完全特性保证了只有拥有 C-old,new 日志条目的服务器才有可能被选举为领导人。这个时候，领导人创建一条关于 C-new 配置的日志条目并复制给集群就是安全的了。再者，每个服务器在见到新的配置的时候就会立即生效。当新的配置在 C-new 的规则下被提交，旧的配置就变得无关紧要，同时不使用新的配置的服务器就可以被关闭了。如图 11，C-old 和 C-new 没有任何机会同时做出单方面的决定；这保证了安全性。 图 11：一个配置切换的时间线。虚线表示已经被创建但是还没有被提交的条目，实线表示最后被提交的日志条目。领导人首先创建了 C-old,new 的配置条目在自己的日志中，并提交到 C-old,new 中（C-old 的大多数和 C-new 的大多数）。然后他创建 C-new 条目并提交到 C-new 中的大多数。这样就不存在 C-new 和 C-old 可以同时做出决定的时间点。 在关于重新配置还有三个问题需要提出。第一个问题是，新的服务器可能初始化没有存储任何的日志条目。当这些服务器以这种状态加入到集群中，那么他们需要一段时间来更新追赶，这时还不能提交新的日志条目。为了避免这种可用性的间隔时间，Raft在配置更新的时候使用了一种额外的阶段，在这个阶段，新的服务器以没有投票权身份加入到集群中来（领导人复制日志给他们，但是不考虑他们是大多数）。一旦新的服务器追赶上了集群中的其他机器，重新配置可以像上面描述的一样处理。第二个问题是，集群的领导人可能不是新配置的一员。在这种情况下，领导人就会在提交了 C-new 日志之后退位（回到跟随者状态）。这意味着有这样的一段时间，领导人管理着集群，但是不包括他自己；他复制日志但是不把他自己算作是大多数之一。当 C-new 被提交时，会发生领导人过渡，因为这时是最早新的配置可以独立工作的时间点（将总是能够在 C-new 配置下选出新的领导人）。在此之前，可能只能从 C-old 中选出领导人。第三个问题是，移除不在 C-new 中的服务器可能会扰乱集群。这些服务器将不会再接收到心跳，所以当选举超时，他们就会进行新的选举过程。他们会发送拥有新的任期号的请求投票 RPCs，这样会导致当前的领导人回退成跟随者状态。新的领导人最终会被选出来，但是被移除的服务器将会再次超时，然后这个过程会再次重复，导致整体可用性大幅降低。为了避免这个问题，当服务器确认当前领导人存在时，服务器会忽略请求投票 RPCs。特别的，当服务器在当前最小选举超时时间内收到一个请求投票 RPC，他不会更新当前的任期号或者投出选票。这不会影响正常的选举，每个服务器在开始一次选举之前，至少等待一个最小选举超时时间。然而，这有利于避免被移除的服务器扰乱：如果领导人能够发送心跳给集群，那么他就不会被更大的任期号废黜。 7 日志压缩Raft的日志在正常操作中不断的增长，但是在实际的系统中，日志不能无限制的增长。随着日志不断增长，他会占用越来越多的空间，花费越来越多的时间来重置。如果没有一定的机制去清除日志里积累的陈旧的信息，那么会带来可用性问题。快照是最简单的压缩方法。在快照系统中，整个系统的状态都以快照的形式写入到稳定的持久化存储中，然后到那个时间点之前的日志全部丢弃。快照技术被使用在 Chubby 和 ZooKeeper 中，接下来的章节会介绍Raft中的快照技术。增量压缩的方法，例如日志清理或者日志结构合并树，都是可行的。这些方法每次只对一小部分数据进行操作，这样就分散了压缩的负载压力。首先，他们先选择一个已经积累的大量已经被删除或者被覆盖对象的区域，然后重写那个区域还活跃的对象，之后释放那个区域。和简单操作整个数据集合的快照相比，需要增加复杂的机制来实现。状态机可以实现 LSM tree 使用和快照相同的接口，但是日志清除方法就需要修改Raft了。 图 12：一个服务器用新的快照替换了从 1 到 5 的条目，快照值存储了当前的状态。快照中包含了最后的索引位置和任期号。 图 12 展示了Raft中快照的基础思想。每个服务器独立的创建快照，只包括已经被提交的日志。主要的工作包括将状态机的状态写入到快照中。Raft也包含一些少量的元数据到快照中：最后被包含索引指的是被快照取代的最后的条目在日志中的索引值（状态机最后应用的日志），最后被包含的任期指的是该条目的任期号。保留这些数据是为了支持快照后紧接着的第一个条目的附加日志请求时的一致性检查，因为这个条目需要最后的索引值和任期号。为了支持集群成员更新（第 6 节），快照中也将最后的一次配置作为最后一个条目存下来。一旦服务器完成一次快照，他就可以删除最后索引位置之前的所有日志和快照了。尽管通常服务器都是独立的创建快照，但是领导人必须偶尔的发送快照给一些落后的跟随者。这通常发生在当领导人已经丢弃了下一条需要发送给跟随者的日志条目的时候。幸运的是这种情况不是常规操作：一个与领导人保持同步的跟随者通常都会有这个条目。然而一个运行非常缓慢的跟随者或者新加入集群的服务器（第 6 节）将不会有这个条目。这时让这个跟随者更新到最新的状态的方式就是通过网络把快照发送给他们。 安装快照 RPC： 在领导人发送快照给跟随者时使用到。领导人总是按顺序发送。 参数 解释 term 领导人的任期号 leaderId 领导人的 Id，以便于跟随者重定向请求 lastIncludedIndex 快照中包含的最后日志条目的索引值 lastIncludedTerm 快照中包含的最后日志条目的任期号 offset 分块在快照中的偏移量 data[] 原始数据 done 如果这是最后一个分块则为 true 结果 解释 term 当前任期号，便于领导人更新自己 接收者实现： 如果term &lt; currentTerm就立即回复 如果是第一个分块（offset 为 0）就创建一个新的快照 在指定偏移量写入数据 如果 done 是 false，则继续等待更多的数据 保存快照文件，丢弃索引值小于快照的日志 如果现存的日志拥有相同的最后任期号和索引值，则后面的数据继续保持 丢弃整个日志 使用快照重置状态机 图 13：一个关于安装快照的简要概述。为了便于传输，快照都是被分成分块的；每个分块都给了跟随者生命的迹象，所以跟随者可以重置选举超时计时器。 在这种情况下领导人使用一种叫做安装快照的新的 RPC 来发送快照给太落后的跟随者；见图 13。当跟随者通过这种 RPC 接收到快照时，他必须自己决定对于已经存在的日志该如何处理。通常快照会包含没有在接收者日志中存在的信息。在这种情况下，跟随者直接丢弃他所有的日志；这些会被快照所取代，但是可能会和没有提交的日志产生冲突。如果接收到的快照是自己日志的前面部分（由于网络重传或者错误），那么被快照包含的条目将会被全部删除，但是快照之后的条目必须正确和保留。这种快照的方式背离了Raft的强领导人原则，因为跟随者可以在不知道领导人情况下创建快照。但是我们认为这种背离是值得的。领导人的存在，是为了解决在达成一致性的时候的冲突，但是在创建快照的时候，一致性已经达成，这时不存在冲突了，所以没有领导人也是可以的。数据依然是从领导人传给跟随者，只是跟随者可以重新组织他们的数据了。我们考虑过一种替代的基于领导人的快照方案，即只有领导人创建快照，然后发送给所有的跟随者。但是这样做有两个缺点。第一，发送快照会浪费网络带宽并且延缓了快照处理的时间。每个跟随者都已经拥有了所有产生快照需要的信息，而且很显然，自己从本地的状态中创建快照比通过网络接收别人发来的要经济。第二，领导人的实现会更加复杂。例如，领导人需要发送快照的同时并行的将新的日志条目发送给跟随者，这样才不会阻塞新的客户端请求。还有两个问题影响了快照的性能。首先，服务器必须决定什么时候应该创建快照。如果快照创建的过于频繁，那么就会浪费大量的磁盘带宽和其他资源；如果创建快照频率太低，他就要承受耗尽存储容量的风险，同时也增加了从日志重建的时间。一个简单的策略就是当日志大小达到一个固定大小的时候就创建一次快照。如果这个阈值设置的显著大于期望的快照的大小，那么快照对磁盘压力的影响就会很小了。第二个影响性能的问题就是写入快照需要花费显著的一段时间，并且我们还不希望影响到正常操作。解决方案是通过写时复制的技术，这样新的更新就可以被接收而不影响到快照。例如，具有函数式数据结构的状态机天然支持这样的功能。另外，操作系统的写时复制技术的支持（如 Linux 上的 fork）可以被用来创建完整的状态机的内存快照（我们的实现就是这样的）。 8 客户端交互这一节将介绍客户端是如何和Raft进行交互的，包括客户端如何发现领导人和Raft是如何支持线性化语义的。这些问题对于所有基于一致性的系统都存在，并且Raft的解决方案和其他的也差不多。Raft中的客户端发送所有请求给领导人。当客户端启动的时候，他会随机挑选一个服务器进行通信。如果客户端第一次挑选的服务器不是领导人，那么那个服务器会拒绝客户端的请求并且提供他最近接收到的领导人的信息（附加条目请求包含了领导人的网络地址）。如果领导人已经崩溃了，那么客户端的请求就会超时；客户端之后会再次重试随机挑选服务器的过程。我们Raft的目标是要实现线性化语义（每一次操作立即执行，只执行一次，在他调用和收到回复之间）。但是，如上述，Raft是可以执行同一条命令多次的：例如，如果领导人在提交了这条日志之后，但是在响应客户端之前崩溃了，那么客户端会和新的领导人重试这条指令，导致这条命令就被再次执行了。解决方案就是客户端对于每一条指令都赋予一个唯一的序列号。然后，状态机跟踪每条指令最新的序列号和相应的响应。如果接收到一条指令，它的序列号已经被执行了，那么就立即返回结果，而不重新执行指令。只读的操作可以直接处理而不需要记录日志。但是，在不增加任何限制的情况下，这么做可能会冒着返回脏数据的风险，因为领导人响应客户端请求时可能已经被新的领导人作废了，但是他还不知道。线性化的读操作必须不能返回脏数据，Raft需要使用两个额外的措施在不使用日志的情况下保证这一点。首先，领导人必须有关于被提交日志的最新信息。领导人完全特性保证了领导人一定拥有所有已经被提交的日志条目，但是在他任期开始的时候，他可能不知道那些是已经被提交的。为了知道这些信息，他需要在他的任期里提交一条日志条目。Raft中通过领导人在任期开始的时候提交一个空白的没有任何操作的日志条目到日志中去来实现。第二，领导人在处理只读的请求之前必须检查自己是否已经被废黜了（他自己的信息已经变脏了如果一个更新的领导人被选举出来）。Raft中通过让领导人在响应只读请求之前，先和集群中的大多数节点交换一次心跳信息来处理这个问题。可选的，领导人可以依赖心跳机制来实现一种租约的机制，但是这种方法依赖时间来保证安全性（假设时间误差是有界的）。 9 算法实现和评估我们已经为 RAMCloud 实现了Raft算法作为存储配置信息的复制状态机的一部分，并且帮助 RAMCloud 协调故障转移。这个Raft实现包含大约 2000 行 C++ 代码，其中不包括测试、注释和空行。这些代码是开源的。同时也有大约 25 个其他独立的第三方的基于这篇论文草稿的开源实现，针对不同的开发场景。同时，很多公司已经部署了基于Raft的系统。这一节会从三个方面来评估Raft算法：可理解性、正确性和性能。 9.1 可理解性为了和Paxos比较Raft算法的可理解能力，我们针对高层次的本科生和研究生，在斯坦福大学的高级操作系统课程和加州大学伯克利分校的分布式计算课程上，进行了一次学习的实验。我们分别拍了针对Raft和Paxos的视频课程，并准备了相应的小测验。Raft的视频讲课覆盖了这篇论文的所有内容除了日志压缩；Paxos讲课包含了足够的资料来创建一个等价的复制状态机，包括单决策 Paxos，多决策 Paxos，重新配置和一些实际系统需要的性能优化（例如领导人选举）。小测验测试一些对算法的基本理解和解释一些边角的示例。每个学生都是看完第一个视频，回答相应的测试，再看第二个视频，回答相应的测试。大约有一半的学生先进行Paxos部分，然后另一半先进行Raft部分，这是为了说明两者独立的区别从第一个算法处学来的经验。我们计算参加人员的每一个小测验的得分来看参与者是否在Raft算法上更加容易理解。我们尽可能的使得Paxos和Raft的比较更加公平。这个实验偏爱Paxos表现在两个方面：43 个参加者中有 15 个人在之前有一些 Paxos的经验，并且Paxos的视频要长 14%。如表格 1 总结的那样，我们采取了一些措施来减轻这种潜在的偏见。我们所有的材料都可供审查。 关心 缓和偏见采取的手段 可供查看的材料 相同的讲课质量 两者使用同一个讲师。Paxos使用的是现在很多大学里经常使用的。Paxos会长 14%。 视频 相同的测验难度 问题以难度分组，在两个测验里成对出现。 小测验 公平评分 使用红字标题。随机顺序打分，两个测验交替进行。 红字标题 表 1：考虑到可能会存在的偏见，对于每种情况的解决方法，和相应的材料。 参加者平均在Raft的测验中比Paxos高 4.9 分（总分 60，那么Raft的平均得分是 25.7，而Paxos是 20.8）；图 14 展示了每个参与者的得分。一对 t -测试表明，拥有 95% 的可信度，真实的Raft分数分布至少比Paxos高 2.5 分。 图 14：一个散点图表示了 43 个学生在Paxos和Raft的小测验中的成绩。在对角线之上的点表示在Raft获得了更高分数的学生。 我们也建立了一个线性回归模型来预测一个新的学生的测验成绩，基于以下三个因素：他们使用的是哪个小测验，之前对Paxos的经验，和学习算法的顺序。模型显示，对小测验的选择会产生 12.5 分的差别在对 Raft的好感度上。这显著的高于之前的 4.9 分，因为很多学生在之前都已经有了对于 Paxos的经验，这相当明显的帮助 Paxos，对Raft就没什么太大影响了。但是奇怪的是，模型预测对于先进性Paxos小测验的人而言，Raft的小测验得分会比Paxos低 6.3 分；我们不知道为什么，但这在统计学上是这样的。我们同时也在测验之后调查了参与者，他们认为哪个算法更加容易实现和解释；这个的结果在图 15 上。压倒性的结果表明Raft算法更加容易实现和解释（41 人中的 33个）。但是，这种自己报告的结果不如参与者的成绩更加可信，并且参与者可能因为我们的Raft更加易于理解的假说而产生偏见。 图 15：通过一个 5 分制的问题，参与者（左边）被问哪个算法他们觉得在一个高效正确的系统里更容易实现，右边被问哪个更容易向学生解释。 关于Raft用户学习有一个更加详细的讨论。 9.2 正确性在第 5 节，我们已经进行了一个正式的说明，和对一致性机制的安全性证明。这个正式说明让图 2 中的信息非常清晰通过 TLA+ 说明语言。大约 400 行说明充当了证明的主题。同时对于任何想实现的人也是十分有用的。我们非常机械的证明了日志完全特性通过 TLA 证明系统。然而，这个证明依赖的约束前提还没有被机械证明（例如，我们还没有证明这个说明中的类型安全）。而且，我们已经写了一个非正式的证明关于状态机安全性质是完备的，并且是相当清晰的（大约 3500 个词）。 9.3 性能Raft和其他一致性算法例如Paxos有着差不多的性能。在性能方面，最重要的关注点是，当领导人被选举成功时，什么时候复制新的日志条目。Raft通过很少数量的消息包（一轮从领导人到集群大多数机器的消息）就达成了这个目的。同时，进一步提升Raft的性能也是可行的。例如，很容易通过支持批量操作和管道操作来提高吞吐量和降低延迟。对于其他一致性算法已经提出过很多性能优化方案；其中有很多也可以应用到Raft中来，但是我们暂时把这个问题放到未来的工作中去。我们使用我们自己的Raft实现来衡量Raft领导人选举的性能并且回答两个问题。首先，领导人选举的过程收敛是否快速？第二，在领导人宕机之后，最小的系统宕机时间是多久？ 图 16：发现并替换一个已经崩溃的领导人的时间。上面的图考察了在选举超时时间上的随机化程度，下面的图考察了最小超时时间。每条线代表了 1000 次实验（除了 150-150 毫秒只试了 100 次），和相应的确定的选举超时时间。例如，150-155 毫秒意思是，选举超时时间从这个区间范围内随机选择并确定下来。这个实验在一个拥有 5 个节点的集群上进行，其广播时延大约是 15 毫秒。对于 9 个节点的集群，结果也差不多。 为了衡量领导人选举，我们反复的使一个拥有五个节点的服务器集群的领导人宕机，并计算需要多久才能发现领导人已经宕机并选出一个新的领导人（见图 16）。为了构建一个最坏的场景，在每一的尝试里，服务器都有不同长度的日志，意味着有些候选人是没有成为领导人的资格的。另外，为了促成选票瓜分的情况，我们的测试脚本在终止领导人之前同步的发送了一次心跳广播（这大约和领导人在崩溃前复制一个新的日志给其他机器很像）。领导人均匀的随机的在心跳间隔里宕机，也就是最小选举超时时间的一半。因此，最小宕机时间大约就是最小选举超时时间的一半。图 16 上面的图表表明，只需要在选举超时时间上使用很少的随机化就可以大大避免选票被瓜分的情况。在没有随机化的情况下，在我们的测试里，选举过程往往都需要花费超过 10 秒钟由于太多的选票瓜分的情况。仅仅增加 5 毫秒的随机化时间，就大大的改善了选举过程，现在平均的宕机时间只有 287 毫秒。增加更多的随机化时间可以大大改善最坏情况：通过增加 50 毫秒的随机化时间，最坏的完成情况（1000 次尝试）只要 513 毫秒。图 16 中下面的图显示，通过减少选举超时时间可以减少系统的宕机时间。在选举超时时间为 12-24 毫秒的情况下，只需要平均 35 毫秒就可以选举出新的领导人（最长的一次花费了 152 毫秒）。然而，进一步降低选举超时时间的话就会违反Raft的时间不等式需求：在选举新领导人之前，领导人就很难发送完心跳包。这会导致没有意义的领导人改变并降低了系统整体的可用性。我们建议使用更为保守的选举超时时间，比如 150-300 毫秒；这样的时间不大可能导致没有意义的领导人改变，而且依然提供不错的可用性。 10 相关工作已经有很多关于一致性算法的工作被发表出来，其中很多都可以归到下面的类别中： Lamport 关于Paxos的原始描述，和尝试描述的更清晰。 关于Paxos的更详尽的描述，补充遗漏的细节并修改算法，使得可以提供更加容易的实现基础。 实现一致性算法的系统，例如 Chubby，ZooKeeper 和 Spanner。对于 Chubby 和 Spanner 的算法并没有公开发表其技术细节，尽管他们都声称是基于Paxos的。ZooKeeper 的算法细节已经发表，但是和Paxos着实有着很大的差别。 Paxos可以应用的性能优化。 Oki 和 Liskov 的 Viewstamped Replication（VR），一种和Paxos差不多的替代算法。原始的算法描述和分布式传输协议耦合在了一起，但是核心的一致性算法在最近的更新里被分离了出来。VR 使用了一种基于领导人的方法，和Raft有很多相似之处。 Raft和Paxos最大的不同之处就在于Raft的强领导特性：Raft使用领导人选举作为一致性协议里必不可少的部分，并且将尽可能多的功能集中到了领导人身上。这样就可以使得算法更加容易理解。例如，在Paxos中，领导人选举和基本的一致性协议是正交的：领导人选举仅仅是性能优化的手段，而且不是一致性所必须要求的。但是，这样就增加了多余的机制：Paxos同时包含了针对基本一致性要求的两阶段提交协议和针对领导人选举的独立的机制。相比较而言，Raft就直接将领导人选举纳入到一致性算法中，并作为两阶段一致性的第一步。这样就减少了很多机制。像Raft一样，VR 和 ZooKeeper 也是基于领导人的，因此他们也拥有一些Raft的优点。但是，Raft比 VR 和 ZooKeeper 拥有更少的机制因为Raft尽可能的减少了非领导人的功能。例如，Raft中日志条目都遵循着从领导人发送给其他人这一个方向：附加条目 RPC 是向外发送的。在 VR 中，日志条目的流动是双向的（领导人可以在选举过程中接收日志）；这就导致了额外的机制和复杂性。根据 ZooKeeper 公开的资料看，它的日志条目也是双向传输的，但是它的实现更像 Raft。和上述我们提及的其他基于一致性的日志复制算法中，Raft的消息类型更少。例如，我们数了一下 VR 和 ZooKeeper 使用的用来基本一致性需要和成员改变的消息数（排除了日志压缩和客户端交互，因为这些都比较独立且和算法关系不大）。VR 和 ZooKeeper 都分别定义了 10 中不同的消息类型，相对的，Raft只有 4 中消息类型（两种 RPC 请求和对应的响应）。Raft的消息都稍微比其他算法的要信息量大，但是都很简单。另外，VR 和 ZooKeeper 都在领导人改变时传输了整个日志；所以为了能够实践中使用，额外的消息类型就很必要了。Raft的强领导人模型简化了整个算法，但是同时也排斥了一些性能优化的方法。例如，平等主义Paxos（EPaxos）在某些没有领导人的情况下可以达到很高的性能。平等主义Paxos充分发挥了在状态机指令中的交换性。任何服务器都可以在一轮通信下就提交指令，除非其他指令同时被提出了。然而，如果指令都是并发的被提出，并且互相之间不通信沟通，那么 EPaxos就需要额外的一轮通信。因为任何服务器都可以提交指令，所以 EPaxos在服务器之间的负载均衡做的很好，并且很容易在 WAN 网络环境下获得很低的延迟。但是，他在Paxos上增加了非常明显的复杂性。一些集群成员变换的方法已经被提出或者在其他的工作中被实现，包括 Lamport 的原始的讨论，VR 和 SMART。我们选择使用共同一致的方法因为他对一致性协议的其他部分影响很小，这样我们只需要很少的一些机制就可以实现成员变换。Lamport 的基于 α 的方法之所以没有被Raft选择是因为它假设在没有领导人的情况下也可以达到一致性。和 VR 和 SMART 相比较，Raft的重新配置算法可以在不限制正常请求处理的情况下进行；相比较的，VR 需要停止所有的处理过程，SMART 引入了一个和 α 类似的方法，限制了请求处理的数量。Raft的方法同时也需要更少的额外机制来实现，和 VR、SMART 比较而言。 11 结论算法的设计通常会把正确性，效率或者简洁作为主要的目标。尽管这些都是很有意义的目标，但是我们相信，可理解性也是一样的重要。在开发者把算法应用到实际的系统中之前，这些目标没有一个会被实现，这些都会必然的偏离发表时的形式。除非开发人员对这个算法有着很深的理解并且有着直观的感觉，否则将会对他们而言很难在实现的时候保持原有期望的特性。在这篇论文中，我们尝试解决分布式一致性问题，但是一个广为接受但是十分令人费解的算法Paxos已经困扰了无数学生和开发者很多年了。我们创造了一种新的算法 Raft，显而易见的比Paxos要容易理解。我们同时也相信，Raft也可以为实际的实现提供坚实的基础。把可理解性作为设计的目标改变了我们设计Raft的方式；这个过程是我们发现我们最终很少有技术上的重复，例如问题分解和简化状态空间。这些技术不仅提升了Raft的可理解性，同时也使我们坚信其正确性。 12 感谢这项研究必须感谢以下人员的支持：Ali Ghodsi，David Mazie`res，和伯克利 CS 294-91 课程、斯坦福 CS 240 课程的学生。Scott Klemmer 帮我们设计了用户调查，Nelson Ray 建议我们进行统计学的分析。在用户调查时使用的关于Paxos的幻灯片很大一部分是从 Lorenzo Alvisi 的幻灯片上借鉴过来的。特别的，非常感谢 DavidMazieres 和 Ezra Hoch，他们找到了Raft中一些难以发现的漏洞。许多人提供了关于这篇论文十分有用的反馈和用户调查材料，包括 Ed Bugnion，Michael Chan，Hugues Evrard，Daniel Giffin，Arjun Gopalan，Jon Howell，Vimalkumar Jeyakumar，Ankita Kejriwal，Aleksandar Kracun，Amit Levy，Joel Martin，Satoshi Matsushita，Oleg Pesok，David Ramos，Robbert van Renesse，Mendel Rosenblum，Nicolas Schiper，Deian Stefan，Andrew Stone，Ryan Stutsman，David Terei，Stephen Yang，Matei Zaharia 以及 24 位匿名的会议审查人员（可能有重复），并且特别感谢我们的领导人 Eddie Kohler。Werner Vogels 发了一条早期草稿链接的推特，给Raft带来了极大的关注。我们的工作由 Gigascale 系统研究中心和 Multiscale 系统研究中心给予支持，这两个研究中心由关注中心研究程序资金支持，一个是半导体研究公司的程序，由 STARnet 支持，一个半导体研究公司的程序由 MARCO 和 DARPA 支持，在国家科学基金会的 0963859 号批准，并且获得了来自 Facebook，Google，Mellanox，NEC，NetApp，SAP 和 Samsung 的支持。Diego Ongaro 由 Junglee 公司，斯坦福的毕业团体支持。 参考略","categories":[],"tags":[{"name":"raft","slug":"raft","permalink":"https://oatiz.me/tags/raft/"},{"name":"cap","slug":"cap","permalink":"https://oatiz.me/tags/cap/"},{"name":"distributed consensus","slug":"distributed-consensus","permalink":"https://oatiz.me/tags/distributed-consensus/"}]},{"title":"rust中所有权,引用,生命周期小记","slug":"rust_ownership","date":"2018-11-29T16:13:04.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2018/11/29/rust_ownership/","link":"","permalink":"https://oatiz.me/2018/11/29/rust_ownership/","excerpt":"","text":"rust 所有权,引用,生命周期所有权存在即是为了管理堆数据 跟踪代码正在堆上使用的数据 最大限度减少堆上的重复数据 清理堆上不再使用的数据 rules Each value in Rust has a variable that’s called its owner. rust每个值都有一个被叫做owner的变量 There can only be one owner at a time. 值只能有一个所有者 When the owner goes out of scope, the value will be dropped. 当所有者离开作用域,值将会被清除 RAIIResource Acquisition Is Initialization (RAII) 引用与借用引用作为方法函数为借用, 脱离作用域值不会被丢弃掉 数据竞争(data race)数据竞争先决条件: Two or more pointers access the same data at the same time. 两个或多个指针同时访问同一数据 At least one of the pointers is being used to write to the data. 至少有一个指针被用来写入数据 There’s no mechanism being used to synchronize access to the data. 没有同步数据访问的机制 rules At any given time, you can have either one mutable reference or any number of immutable references. 任意给定时间,只能拥有一个可变引用或者多个不可变引用 References must always be valid. 引用必须总是有效的 生命周期用来解决悬垂指针问题悬垂指针(dangling pointer): 指针指向的内存已经被分配给其他自由者 TODO …","categories":[],"tags":[{"name":"rust","slug":"rust","permalink":"https://oatiz.me/tags/rust/"},{"name":"ownership","slug":"ownership","permalink":"https://oatiz.me/tags/ownership/"},{"name":"lifetime","slug":"lifetime","permalink":"https://oatiz.me/tags/lifetime/"},{"name":"RAII","slug":"RAII","permalink":"https://oatiz.me/tags/RAII/"}]},{"title":"JVM常量池小解","slug":"The_Constant_Pool","date":"2018-10-16T21:40:00.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2018/10/16/The_Constant_Pool/","link":"","permalink":"https://oatiz.me/2018/10/16/The_Constant_Pool/","excerpt":"","text":"前言今日,同事问我一个问题,以下java代码输出什么:123String s1 = \"hello world\";String s2 = \"hello\" + \" \" + \"world\";System.out.println(s1 == s2); //true 沉思了一下,依我的编码经验给出了结果为true,辣么他接着问这是为什么,于是乎我就说常量是在编译期间存放在常量池中的,他接着问什么是常量池,都有什么东西存放在里面? 综上所述,引出了今天我们的问题什么是常量池? 定义Run-Time Constant Pool A run-time constant pool is a per-class or per-interface run-time representation of the constant_pool table in a class file. It contains several kinds of constants, ranging from numeric literals known at compile-time to method and field references that must be resolved at run-time. The run-time constant pool serves a function similar to that of a symbol table for a conventional programming language, although it contains a wider range of data than a typical symbol table. 运行时常量池(Runtime Constant Pool)是每一个类或接口的常量池(Constant_Pool)的运行时表示形式,它包括了若干种不同的常量:从编译期可知的数值字面量到必须运行 期解析后才能获得的方法或字段引用。运行时常量池扮演了类似传统语言中符号表(Symbol Table)的角色，不过它存储数据范围比通常意义上的符号表要更为广泛。 The Constant Pool Java Virtual Machine instructions do not rely on the run-time layout of classes, interfaces, class instances, or arrays. Instead, instructions refer to symbolic information in the constant_pool table. Java 虚拟机指令执行时不依赖与类、接口,实例或数组的运行时布局,而是依赖常量池(constant_pool)表中的符号信息 以上是jvm规范中定义的,简单点来说:在程序运行期间有块区域叫运行时常量池,运行时常量池里面存储着一些常量池结构的数据(每个结构里面都是class文件中的某种类型的字面量) 结构1234cp_info &#123; u1 tag; u1 info[];&#125; jvm规定了不同的tag值和不同类型的字面量对应关系,如下图所示: Constant Type Value CONSTANT_Class 7 CONSTANT_Fieldref 9 CONSTANT_Methodref 10 CONSTANT_InterfaceMethodref 11 CONSTANT_String 8 CONSTANT_Integer 3 CONSTANT_Float 4 CONSTANT_Long 5 CONSTANT_Double 6 CONSTANT_NameAndType 12 CONSTANT_Utf8 1 CONSTANT_MethodHandle 15 CONSTANT_MethodType 16 CONSTANT_InvokeDynamic 18 此次只分析基本类型与String: CONSTANT_String_info1234CONSTANT_String_info &#123; u1 tag; u2 string_index;&#125; u1表示1个无符号字节,u2表示2个无符号字节tag: 8string_index: 指向CONSTANT_Utf8_info结构体 CONSTANT_Utf8_info12345CONSTANT_Utf8_info &#123; u1 tag; u2 length; u1 bytes[length];&#125; u1表示1个无符号字节,u2表示2个无符号字节tag: 1length: utf-8编码的字节数组的长度bytes[lenth]: utf-8编码的字节数组 CONSTANT_Integer_info1234CONSTANT_Integer_info &#123; u1 tag; u4 bytes;&#125; u1表示1个无符号字节,u4表示4个无符号字节tag: 3bytes: int常量的值 CONSTANT_Float_info1234CONSTANT_Float_info &#123; u1 tag; u4 bytes;&#125; u1表示1个无符号字节,u4表示4个无符号字节tag: 4bytes: float常量的值 CONSTANT_Long_info12345CONSTANT_Long_info &#123; u1 tag; u4 high_bytes; u4 low_bytes;&#125; u1表示1个无符号字节,u4表示4个无符号字节tag: 5 CONSTANT_Double_info12345CONSTANT_Double_info &#123; u1 tag; u4 high_bytes; u4 low_bytes;&#125; u1表示1个无符号字节,u4表示4个无符号字节tag: 6 bytecode op有人可能就奇怪了,怎么少了byte/short/char/boolean这几个基本类型的呢?jvm在此处有对应的指令支持: \b 类型 范围 指令 \bboolean [0, 1] iconst_n byte [-128, 127] iconst_m1, iconst_n, bipush short [-32768, 32767] iconst_m1, iconst_n, bipush, sipush char [0, 65535] iconst_m1,iconst_n, bipush, sipush, ldc int [-2147483648, 2147483647] iconst_m1, iconst_n, bipush, sipush, ldc byte,short,char其实都是int与boolean类似.也是在编译时就已经变成了int,然后执行int的一些操作符。 测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102public static void main(String[] args) &#123; // boolean boolean booltrue = true; boolean boolfalse = false; // byte byte byte_2 = -2; byte byte_1 = -1; // -1是 iconst_m1 byte byte0 = 0; byte byte1 = 1; byte byte2 = 2; byte byte3 = 3; byte byte4 = 4; byte byte5 = 5; byte byte6 = 6; // [0, 5]是 iconst_n 的范围,超出部分用bipush // short short short_2 = -2; short short_1 = -1; short short0 = 0; short short1 = 1; short short2 = 2; short short3 = 3; short short4 = 4; short short5 = 5; short short6 = 6; short short12 = 12; short short127 = 127; short short128 = 128; //从 128开始,超出push的能力,换用sipush short short_32768 = -32768; short short32766 = 32766; short short32767 = 32767; //sipush能表示的范围和 short 一样 // char char char0 = 0; char char1 = 1; char char2 = 2; char char3 = 3; char char4 = 4; char char5 = 5; char char6 = 6; char char12 = 12; char char127 = 127; char char128 = 128; char char32766 = 32766; char char32767 = 32767; char char32768 = 32768; //超出 sipush 能表示的范围, 所以只能用ldc char char65535 = 65535; // int int int_2 = -2; int int_1 = -1; int int0 = 0; int int1 = 1; int int2 = 2; int int3 = 3; int int4 = 4; int int5 = 5; int int6 = 6; int int_129 = -129; int int_128 = -128; int int_127 = -127; int int127 = 127; int int128 = 128; int int255 = 255; int int256 = 256; int int257 = 257; int int_32769 = -32769; int int_32768 = -32768; int int32766 = 32766; int int32767 = 32767; int int32768 = 32768; int int65534 = 65534; int int65535 = 65535; // long (除了0,1 均是ldc(ldc2_w)) long long_2 = -2; long long_1 = -1; long long0 = 0; // lconst_0 long long1 = 1; // lconst_1 long long2 = 2; long long3 = 3; long long4 = 4; long long5 = 5; long long6 = 6; long long_129 = -129; long long_128 = -128; long long_127 = -127; long long127 = 127; long long128 = 128; long long255 = 255; long long256 = 256; long long257 = 257; long long_32769 = -32769; long long_32768 = -32768; long long32766 = 32766; long long32767 = 32767; long long32768 = 32768; long long65534 = 65534; long long65535 = 65535; long long165536 = 165536; &#125; javap结果123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246Classfile /Users/oatiz/IdeaProjects/xxx-daas/daas-test/src/main/java/com/xxx/daas/test/StringTest.class Last modified 2018-10-16; size 1230 bytes MD5 checksum 99b3a33d2192b639186f350eacc0aac2 Compiled from \"StringTest.java\"public class com.xxx.daas.test.StringTest minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPERConstant pool: #1 = Methodref #53.#62 // java/lang/Object.\"&lt;init&gt;\":()V #2 = Integer 32768 #3 = Integer 65535 #4 = Integer -32769 #5 = Integer 65534 #6 = Long -2l #8 = Long -1l #10 = Long 2l #12 = Long 3l #14 = Long 4l #16 = Long 5l #18 = Long 6l #20 = Long -129l #22 = Long -128l #24 = Long -127l #26 = Long 127l #28 = Long 128l #30 = Long 255l #32 = Long 256l #34 = Long 257l #36 = Long -32769l #38 = Long -32768l #40 = Long 32766l #42 = Long 32767l #44 = Long 32768l #46 = Long 65534l #48 = Long 65535l #50 = Long 165536l #52 = Class #63 // com/xxx/daas/test/StringTest #53 = Class #64 // java/lang/Object #54 = Utf8 &lt;init&gt; #55 = Utf8 ()V #56 = Utf8 Code #57 = Utf8 LineNumberTable #58 = Utf8 main #59 = Utf8 ([Ljava/lang/String;)V #60 = Utf8 SourceFile #61 = Utf8 StringTest.java #62 = NameAndType #54:#55 // \"&lt;init&gt;\":()V #63 = Utf8 com/xxx/daas/test/StringTest #64 = Utf8 java/lang/Object&#123; public com.xxx.daas.test.StringTest(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\"&lt;init&gt;\":()V 4: return LineNumberTable: line 6: 0 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=115, args_size=1 0: iconst_1 1: istore_1 2: iconst_0 3: istore_2 4: bipush -2 6: istore_3 7: iconst_m1 8: istore 4 10: iconst_0 11: istore 5 13: iconst_1 14: istore 6 16: iconst_2 17: istore 7 19: iconst_3 20: istore 8 22: iconst_4 23: istore 9 25: iconst_5 26: istore 10 28: bipush 6 30: istore 11 32: bipush -2 34: istore 12 36: iconst_m1 37: istore 13 39: iconst_0 40: istore 14 42: iconst_1 43: istore 15 45: iconst_2 46: istore 16 48: iconst_3 49: istore 17 51: iconst_4 52: istore 18 54: iconst_5 55: istore 19 57: bipush 6 59: istore 20 61: bipush 12 63: istore 21 65: bipush 127 67: istore 22 69: sipush 128 72: istore 23 74: sipush -32768 77: istore 24 79: sipush 32766 82: istore 25 84: sipush 32767 87: istore 26 89: iconst_0 90: istore 27 92: iconst_1 93: istore 28 95: iconst_2 96: istore 29 98: iconst_3 99: istore 30 101: iconst_4 102: istore 31 104: iconst_5 105: istore 32 107: bipush 6 109: istore 33 111: bipush 12 113: istore 34 115: bipush 127 117: istore 35 119: sipush 128 122: istore 36 124: sipush 32766 127: istore 37 129: sipush 32767 132: istore 38 134: ldc #2 // int 32768 136: istore 39 138: ldc #3 // int 65535 140: istore 40 142: bipush -2 144: istore 41 146: iconst_m1 147: istore 42 149: iconst_0 150: istore 43 152: iconst_1 153: istore 44 155: iconst_2 156: istore 45 158: iconst_3 159: istore 46 161: iconst_4 162: istore 47 164: iconst_5 165: istore 48 167: bipush 6 169: istore 49 171: sipush -129 174: istore 50 176: bipush -128 178: istore 51 180: bipush -127 182: istore 52 184: bipush 127 186: istore 53 188: sipush 128 191: istore 54 193: sipush 255 196: istore 55 198: sipush 256 201: istore 56 203: sipush 257 206: istore 57 208: ldc #4 // int -32769 210: istore 58 212: sipush -32768 215: istore 59 217: sipush 32766 220: istore 60 222: sipush 32767 225: istore 61 227: ldc #2 // int 32768 229: istore 62 231: ldc #5 // int 65534 233: istore 63 235: ldc #3 // int 65535 237: istore 64 239: ldc2_w #6 // long -2l 242: lstore 65 244: ldc2_w #8 // long -1l 247: lstore 67 249: lconst_0 250: lstore 69 252: lconst_1 253: lstore 71 255: ldc2_w #10 // long 2l 258: lstore 73 260: ldc2_w #12 // long 3l 263: lstore 75 265: ldc2_w #14 // long 4l 268: lstore 77 270: ldc2_w #16 // long 5l 273: lstore 79 275: ldc2_w #18 // long 6l 278: lstore 81 280: ldc2_w #20 // long -129l 283: lstore 83 285: ldc2_w #22 // long -128l 288: lstore 85 290: ldc2_w #24 // long -127l 293: lstore 87 295: ldc2_w #26 // long 127l 298: lstore 89 300: ldc2_w #28 // long 128l 303: lstore 91 305: ldc2_w #30 // long 255l 308: lstore 93 310: ldc2_w #32 // long 256l 313: lstore 95 315: ldc2_w #34 // long 257l 318: lstore 97 320: ldc2_w #36 // long -32769l 323: lstore 99 325: ldc2_w #38 // long -32768l 328: lstore 101 330: ldc2_w #40 // long 32766l 333: lstore 103 335: ldc2_w #42 // long 32767l 338: lstore 105 340: ldc2_w #44 // long 32768l 343: lstore 107 345: ldc2_w #46 // long 65534l 348: lstore 109 350: ldc2_w #48 // long 65535l 353: lstore 111 355: ldc2_w #50 // long 165536l 358: lstore 113 360: return","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://oatiz.me/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"https://oatiz.me/tags/JAVA/"}]},{"title":"skywalking5.0部署搭建","slug":"skywalking5-0-0-beta-deployment-build","date":"2018-05-15T10:41:45.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2018/05/15/skywalking5-0-0-beta-deployment-build/","link":"","permalink":"https://oatiz.me/2018/05/15/skywalking5-0-0-beta-deployment-build/","excerpt":"","text":"介绍skywalking官网 skywalking-github 背景相关文章:几种分布式调用链监控组件的实践与比较 我们生产使用的spring cloud体系, \beureka来做服务发现,feign进行通信,默认使用 hystrix做服务熔断. 结合上述相关介绍,我们最终采用skywalking 部署下载点击下载地址,然后选择对应版本进行下载,解压 解压下载后解压,文件目录可以分为三部分: agent: 需要监控的应用的代理 collector: 应用trace信息收集器(被监控应用内数据会被收集起来) webapp: 前端页面展示 结构如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657apache-skywalking-apm-incubating|-- agent| |-- activations| | |-- apm-toolkit-log4j-1.x-activation-5.0.0-beta-SNAPSHOT.jar| | |-- apm-toolkit-log4j-2.x-activation-5.0.0-beta-SNAPSHOT.jar| | |-- apm-toolkit-logback-1.x-activation-5.0.0-beta-SNAPSHOT.jar| | |-- apm-toolkit-opentracing-activation-5.0.0-beta-SNAPSHOT.jar| | `-- apm-toolkit-trace-activation-5.0.0-beta-SNAPSHOT.jar| |-- config| | `-- agent.config| |-- logs| |-- optional-plugins| | `-- apm-spring-annotation-plugin-5.0.0-beta-SNAPSHOT.jar| |-- plugins| | |-- apm-dubbo-plugin-5.0.0-beta-SNAPSHOT.jar| | |-- apm-elastic-job-2.x-plugin-5.0.0-beta-SNAPSHOT.jar| | |-- ......| | `-- tomcat-7.x-8.x-plugin-5.0.0-beta-SNAPSHOT.jar| `-- skywalking-agent.jar|-- bin| |-- collectorService.bat| |-- collectorService.sh| |-- startup.bat| |-- startup.sh| |-- webappService.bat| `-- webappService.sh|-- collector-libs| |-- agent-grpc-define-5.0.0-beta-SNAPSHOT.jar| |-- agent-grpc-provider-5.0.0-beta-SNAPSHOT.jar| |-- agent-jetty-define-5.0.0-beta-SNAPSHOT.jar| |-- ......| `-- zookeeper-3.4.10.jar|-- config| |-- application.yml| |-- component-libraries.yml| `-- log4j2.xml|-- DISCLAIMER|-- LICENSE|-- licenses| |-- LICENSE-annotations.txt| |-- LICENSE-antlr4-runtime.txt| |-- ......| |-- LICENSE-zuul.txt| `-- ui-licenses| |-- LICENSE-add-dom-event-listener| |-- LICENSE-antd| |-- ......| `-- LICENSE-whatwg-fetch|-- logs| |-- collector.log| |-- skywalking-collector-server.log| |-- webapp-console.log| `-- webapp.log|-- NOTICE|-- README.txt`-- webapp `-- skywalking-webapp.jar \b后端部署 修改config/application.yml,将里面所有host改为物理机ip 修改bin/webappService.sh,将collector.ribbon.listOfServers=127.0.0.1:10800,改为config/application.yml里面naming.jetty.host与port 执行bin/startup.sh 需要注意的是,skywalking数据采用elasticsearch 存储.需要部署es,并且修改es的配置文件 elasticsearch.yml,将对应配置改为\b以下配置: 12network.host: 0.0.0.0thread_pool.bulk.queue_size: 1000 agent部署 复制skywalking-agent到任意目录 配置agent/config/agent.config文件 将collector.servers填写为collector配置文件(config/application.yml)中naming/jetty/ip:port 添加参数 在jvm启动参数添加:-javaagent:/path/to/skywalking-agent/skywalking-agent.jar 假设我们已经将skywalking-agent放到/opt/skywalking/目录下,那么我们的启动命令应该写为: java -javaagent:/opt/skywalking/agent/skywalking-agent.jar -Dskywalking.agent.application_code=gateway -jar gateway.jar 配置除了通过/config/agent.config文件外,可以通过环境变量和VM参数(-D)来进行设置 其他因为现有版本5.0.0-alpha有bug,所以需要使用新发布的5.0.0-beta版,所以需要编译对应版本源码 拉取skywalking对应版本代码 git clone https://github.com/apache/incubator-skywalking.git git checkout v5.0.0-beta 拉取子模块 git submodule init git submodule update 修改npm源 打开apm-webapp/pom.xml,搜索frontend-maven-plugin 将install --registry=https://registry.npmjs.org/ 替换为 install --registry=https://registry.npm.taobao.org/ 编译 mvn clean package -DskipTests 打包成功后对应的skywalking存放在apm-dist/target目录下,根据上面的部署步骤使用 注意事项 \bagent中的collector.ip需要与collector 中配置文件中的相同(agent与collector在不同机器时,注意将ip改为对应机器的ip) 部署agent,collector机器的系统时区必须一致(\b不同时dashboard中查看不到数据) 编译时替换npm源 参考链接skywalking-中文文档\b","categories":[],"tags":[{"name":"apm","slug":"apm","permalink":"https://oatiz.me/tags/apm/"},{"name":"skywalking","slug":"skywalking","permalink":"https://oatiz.me/tags/skywalking/"}]},{"title":"hexo mermaid","slug":"mermaid-test","date":"2017-12-04T16:25:06.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2017/12/04/mermaid-test/","link":"","permalink":"https://oatiz.me/2017/12/04/mermaid-test/","excerpt":"","text":"mermaidflowchartgraph TD A-->B; A-->C; B-->D; C-->D; sequencesequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ganttgantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d git graphgitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch code1echo \"HelloWorld\" 12345678910@requires_authorizationdef somefunc(param1='', param2=0): r'''A docstring''' # interesting if param1 &gt; param2: print 'Gre\\'ater' return (param2 - param1 + 1) or Noneclass SomeClass: pass","categories":[],"tags":[{"name":"mermaid","slug":"mermaid","permalink":"https://oatiz.me/tags/mermaid/"}]},{"title":"GC学习笔记:GC标记-清除算法(三)","slug":"GC-notes-3-GC-mark-clear-algorithm","date":"2017-11-26T00:17:52.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2017/11/26/GC-notes-3-GC-mark-clear-algorithm/","link":"","permalink":"https://oatiz.me/2017/11/26/GC-notes-3-GC-mark-clear-algorithm/","excerpt":"","text":"GC标记-清除算法标记阶段清除阶段分配合并优点实现简单与保守式GC兼容缺点碎片化分配速度与写时复制技术不兼容多个空闲链表BiBOP算法位图标记优点与写时复制技术兼容清除操作更高效延迟清除法","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://oatiz.me/tags/JVM/"},{"name":"GC","slug":"GC","permalink":"https://oatiz.me/tags/GC/"},{"name":"DASS","slug":"DASS","permalink":"https://oatiz.me/tags/DASS/"}]},{"title":"GC学习笔记:GC相关知识(二)","slug":"GC-notes-2-GC-related-knowledge","date":"2017-11-26T00:16:23.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2017/11/26/GC-notes-2-GC-related-knowledge/","link":"","permalink":"https://oatiz.me/2017/11/26/GC-notes-2-GC-related-knowledge/","excerpt":"","text":"GC中基本概念对象/头/域对象\b在GC里,对象表示”通过应用程序利用的数据的集合”。对象配置在内存空间中,GC会根据情况将配置好的对象进行移动或销毁操作。因此,对象是GC的基本单位。对象由“头(header)”与“域(field)”组成 头将对象中保存对象本身信息的部分称为“头”,主要包括以下信息: GC运行所需信息(预先存有) 对象的大小 对象的种类 域把对象使用者在对象中可访问的部分称为“域”,域中的数据类型大致分为2种: 指针\b指向内存空间中某块区域的值 非指针\b编程中直接使用值本身 mutatormutator有改变某物的意思,即改变GC对象间的引用关系。它的实体即为“应用程序”,它进行的实际操作分为2种: 生成对象 更新指针 mutator在进行这些操作是,会为应用程序的用户进行一些处理,随着这些处理的推进,对象间的引用关系随之也会发生”改变”,伴随着这些变化会产生垃圾,而负责\b会后这些就是GC 堆堆是用于存放对象的内存空间,在java堆的实现是一种特殊的树型数据结构 活动对象/非活动对象在已分配到堆中的对象,那些能通过\b程序引用的对象称为”活动对象”,反之,不能通过引用的对象称为”非活动对象”,也就是GC需要回收掉的部分 分配分配(allocation)指的是在内存空间分配对象。当\b堆被活动对象占满,运行GC也无法配置可用空间时,有以下两种选择: 销毁所有计算结果,输出错误信息 扩大堆,分配可用空间 分块分块(chunk)在GC世界里指的是为利用对象而事先准备出来的空间。初始情况下,堆被一个大的分块占据,然后根据mutator的要求把这个分块分割成合适的大小,作为(活动)对象使用。活动对象不久会转化为垃圾回收,此时这部分被回收的内存空间再次分为分块,为下次被利用做准备。周而复始… graph LR A[分块] --> B(活动对象) B --> C{非活动对象} C -->A 根根是指向对象的指针的“起点部分”。 在Java中,可作为根的主要在全局性的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中。 评价标准评价GC算法性能时,采用以下4个标准: 吞吐量吞吐量指的是单位时间内的处理能力,大概为\bHEAP_SIZE／(GC TIME) 最大暂停时间因执行GC而暂停执行mutator的最长时间, 如mutator执行过程中,共GC了3次,分别耗时1s,5s,3s那么最大暂停时间为5s 堆使用效率 访问的局限性具有引用关系的对象之间通常很可能存在连续访问的情况称为“访问的局限性”。一般会把数据存放到内存中,当cpu访问数据时,仅把要使用的数据从内存中读取到缓存。与此同时,我们还将它附件的所有数据都读取到缓存中\b,从而压缩读取数据所需要的时间。考虑到访问的局限性,把具有引用关系的对象安排到堆中相近的位置,就能提高在缓存中读取到想利用数据的概率。","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://oatiz.me/tags/JVM/"},{"name":"GC","slug":"GC","permalink":"https://oatiz.me/tags/GC/"},{"name":"DASS","slug":"DASS","permalink":"https://oatiz.me/tags/DASS/"}]},{"title":"GC学习笔记:GC定义及历史(一)","slug":"GC-notes-1-GC-history","date":"2017-11-25T23:11:14.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2017/11/25/GC-notes-1-GC-history/","link":"","permalink":"https://oatiz.me/2017/11/25/GC-notes-1-GC-history/","excerpt":"","text":"前言\b\b 现实开发中,业务开发人员其实很少接触到GC相关的工作,本人接触GC纯粹是因为好奇和R大的早期博文与一些论坛的回答。断断续续的接触一些碎片化的知识,\b借此将其写下来作为自己学习的一个论证吧。 此系列是阅读中村成洋与相川光著的垃圾回收的算法与实现的笔记。\b 定义GC是Garbage Collection的缩写,也就是“垃圾回收”。顾名思义,程序的垃圾回收就是把程序不用的内存空间回收。 \b\b做的事情 找到内存空间的垃圾 回收垃圾,让空间再次得以利用 \bGC的好处没有GC的\b世界里,由程序员自己手动进行内存管理,这势必非常地麻烦。可能会发生如下问题: 忘记释放内存空间会发生内存泄漏问题 \b释放空间时,忘记初始化指向释放对象的内存空间指针时\b,会发生悬垂指针问题 错误的释放了正在使用中的内存空间,会使程序发生错误 所以在现在的高级语言中都有GC,避免了程序员手动释放内存的麻烦和可能会出现的安全问题 GC的历史 1959: D. Edwards实现了GC 1960: John McCarthy发布了初代GC算法即标记-清除算法 1960: George E. Collins发布了引用计数算法 1963: Marvin L. Minsky发布了复制算法 1996: 首次出版了Garbage Collection一书","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://oatiz.me/tags/JVM/"},{"name":"GC","slug":"GC","permalink":"https://oatiz.me/tags/GC/"}]},{"title":"莫枢的JVM分享笔记","slug":"rednaxelafx_share","date":"2017-07-28T16:28:04.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2017/07/28/rednaxelafx_share/","link":"","permalink":"https://oatiz.me/2017/07/28/rednaxelafx_share/","excerpt":"","text":"前言这篇文章是2010年R大做的一次jvm分享 语言处理器的基本结构语言处理器的种类 编译器 gcc, javac 解释器 Ruby,Pythond等一些实现 IDE Eclipse,NetBeans等 代码分析器 FindBugs等 反编译器 JD,Jad, Reflector.NET等 编译器graph LR source[源代码] --> lexicalAnalyzer[词法分析器] lexicalAnalyzer --> tokens[TOKEN流] tokens1[TOKEN流] --> parser[语法分析器] parser --> ast[语法树/抽象语法树] ast1[语法树/抽象语法树] --> semanticAnalyzer[语义分析器] semanticAnalyzer --> annotationAst[注解抽象语法树] annotationAst1[注解抽象语法树] --> intermediateCodeGen[中间代码生成器] intermediateCodeGen --> intermediateCode[中间代码] intermediateCode1[中间代码] --> independentOptimizingMachines[机器无关优化] independentOptimizingMachines --> intermediateCode2[中间代码] intermediateCode3[中间代码] --> machineRelatedOptimization[机器相关优化] machineRelatedOptimization --> intermediateCode4[中间代码] intermediateCode5[中间代码] --> registerAllocator[寄存器分配器] registerAllocator --> intermediateCode6[中间代码] intermediateCode7[中间代码] --> targetCodeGen[目标代码生成器] targetCodeGen --> target[目标代码] style source fill:#EDB784 style tokens fill:#EDB784 style tokens1 fill:#EDB784 style ast fill:#EDB784 style ast1 fill:#EDB784 style annotationAst fill:#EDB784 style annotationAst1 fill:#EDB784 style intermediateCode fill:#EDB784 style intermediateCode1 fill:#EDB784 style intermediateCode2 fill:#EDB784 style intermediateCode2 fill:#EDB784 style intermediateCode3 fill:#EDB784 style intermediateCode4 fill:#EDB784 style intermediateCode5 fill:#EDB784 style intermediateCode6 fill:#EDB784 style intermediateCode7 fill:#EDB784 style target fill:#EDB784 style lexicalAnalyzer fill:#DAF7A6 style parser fill:#DAF7A6 style semanticAnalyzer fill:#DAF7A6 style intermediateCodeGen fill:#DAF7A6 style independentOptimizingMachines fill:#DAF7A6 style machineRelatedOptimization fill:#DAF7A6 style registerAllocator fill:#DAF7A6 style targetCodeGen fill:#DAF7A6 Java语言与平台Java Conceptual DiagramJDK&nbsp;JavaLanguageJavaLanguage&nbsp;&nbsp;Tools &amp;Tool APIsjavajavacjavadocjarjavapjdepsScriptingSecurityMonitoringJConsoleVisualVMJMCJFRJPDAJVM TIIDLRMIJavaDBDeploymentInternationalizationWebServicesTroubleshootingJREDeploymentJava WebStartApplet / Java Plug-inUser InterfaceToolkitsJavaFXSwingJava 2DAWTAccessibilityDrag andDropInput MethodsImageI/OPrintServiceSoundJava SEAPIIntegrationLibrariesIDLJDBCJNDIRMIRMI-IIOPScriptingCompact ProfilesOtherBaseLibrariesBeansSecuritySerializationExtension MechanismJMXXML JAXPNetworkingOverride MechanismJNIDate and TimeInput/OutputInternationalizationlang and utilBase Librarieslang and utilMathCollectionsRefObjectsRegular ExpressionsLoggingManagementInstrumentationConcurrency UtilitiesReflectionVersioningPreferences APIJARZipJava VirtualMachineJava HotSpot Clientand Server VM&nbsp;&nbsp; Java源码级编译器(javac)Class文件虚拟机与JVMHotSpot VMHotSpot VM的运行时支持HotSpot与解释器HotSpot与JIT编译器HotSpot VM与JSR 292","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://oatiz.me/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"https://oatiz.me/tags/JAVA/"}]},{"title":"建站前言","slug":"preface","date":"2017-07-28T00:24:25.000Z","updated":"2018-12-27T07:09:17.485Z","comments":true,"path":"2017/07/28/preface/","link":"","permalink":"https://oatiz.me/2017/07/28/preface/","excerpt":"","text":"组件hexoyilia tips 评论采用Disqus,需翻墙后才可留言 碎碎念其实在建站之前已经有过一个blog了,但是没有保持下去。原因个人觉得别人已经写好了,没必要重复的去抄别人:)。现在重新得去编写,其实觉得现在的生活乏味无趣,不如找个事情来充实自己。再者自己基础知识很不好,借着这个名头坚持下。 说到学习笔记,个人会通过看书,读别人的博客,实践来验证自己所需掌握的知识点。在此站,会将各个出处标识清楚。 碎碎念结束,愿自己坚持下去。 祝好:)","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://oatiz.me/tags/随笔/"}]}]}